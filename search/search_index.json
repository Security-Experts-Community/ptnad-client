{"config":{"lang":["en","ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pt-nad-client","title":"PT NAD Client","text":"<p>Documentation: https://security-experts-community.github.io/ptnad-client</p> <p>Source Code: https://github.com/security-experts-community/ptnad-client</p> <p>Python library for interacting with the PT NAD API.</p>"},{"location":"#installation","title":"\ud83d\ude80 Installation","text":"<pre><code>pip install ptnad-client\n</code></pre>"},{"location":"#usage","title":"\ud83d\udcd6 Usage","text":"<pre><code>from ptnad import PTNADClient\n\nclient = PTNADClient(\"https://1.3.3.7\", verify_ssl=False)\nclient.set_auth(username=\"user\", password=\"pass\")\n# client.set_auth(auth_type=\"sso\", username=\"user\", password=\"pass\", client_id=\"ptnad\", client_secret=\"11111111-abcd-asdf-12334-0123456789ab\", sso_url=\"https://siem.example.local:3334\")\nclient.login()\n\nquery = \"SELECT src.ip, dst.ip, proto FROM flow WHERE end &gt; 2025.02.25 and end &lt; 2025.02.26 LIMIT 10\"\nresult = client.bql.execute(query)\nprint(f\"Results: {result}\")\n</code></pre>"},{"location":"#filter-examples","title":"\ud83d\udccb Filter Examples","text":"<p>Here are some useful filter examples you can use in your queries:</p> <pre><code># HTTP not on port 80 (external)\n\"app_proto == 'http' &amp;&amp; dst.port != 80 &amp;&amp; dst.groups != 'HOME_NET'\"\n\n# TLS not on port 443 (external)\n\"app_proto == 'tls' &amp;&amp; dst.port != 443 &amp;&amp; dst.groups != 'HOME_NET'\"\n\n# Port 53 but not DNS\n\"dst.port == 53 &amp;&amp; app_proto != 'dns' &amp;&amp; (flags == 'FINISHED' &amp;&amp; !(flags == 'MISSED_START' || flags == 'MISSED_END')) &amp;&amp; pkts.recv &gt; 0\"\n\n# Sessions with files\n\"files\"\n\n# Search file by name\n\"files.filename ~ '*amd64.deb'\"\n\n# Bittorrent from internal network\n\"app_proto == bittorrent and src.groups == 'HOME_NET'\"\n\n# Unencrypted email (external)\n\"(app_proto == 'smtp' || app_proto == 'pop3' || app_proto == 'imap') &amp;&amp; !(smtp.rqs.cmd.name == 'STARTTLS' || pop3.rqs.cmd.name == 'STLS' || imap.rqs.cmd.name == 'STARTTLS') &amp;&amp; dst.groups != 'HOME_NET'\"\n\n# Non-standard ports\n\"src.groups != 'HOME_NET' &amp;&amp; dst.port != 80 &amp;&amp; dst.port != 443 &amp;&amp; dst.port != 25 &amp;&amp; src.port != 53 &amp;&amp; src.port != 443 &amp;&amp; src.port != 123 &amp;&amp; (flags == 'FINISHED' &amp;&amp; !(flags == 'MISSED_START' || flags == 'MISSED_END')) &amp;&amp; pkts.recv &gt; 0\"\n\n# Digital Ocean and Amazon\n\"dst.geo.org == 'DigitalOcean, LLC' || dst.geo.org == 'Amazon.com, Inc.'\"\n\n# POST requests with 200 response\n\"http(rqs.method==POST &amp;&amp; rsp.code==200)\"\n\n# MultiScanner triggered\n\"rpt.type == 'ms'\"\n\n# Miners\n\"rpt.cat == 'miners'\"\n</code></pre> <p>You can find detailed instructions and examples here - usage_examples</p>"},{"location":"#features","title":"\u2705 Features","text":"<p>\ud83d\udd10 Authentication - Local authentication - IAM (SSO) authentication</p> <p>\ud83d\udcca BQL Queries - Execute queries</p> <p>\ud83d\udce1 Monitoring - Get system status - Manage triggers</p> <p>\ud83d\udee1\ufe0f Signatures - Retrieve classes - Get rules (all/specific) - Commit/Revert changes</p> <p>\ud83d\udccb Replists - Create/Modify basic and dynamic replists - Retrieve replist info</p>"},{"location":"#upcoming-features","title":"\ud83d\udee0\ufe0f Upcoming Features","text":"<ul> <li>Documentation</li> <li>Sources management</li> <li>Hosts management</li> <li>Groups management</li> </ul>"},{"location":"#contributing","title":"\ud83e\uddd1\u200d\ud83d\udcbb Contributing","text":"<p>Want to contribute? Check out the following:</p> <ul> <li>\ud83d\udcc4 Contributor Guide</li> </ul> <p>We welcome all ideas, suggestions, and improvements!</p> <p></p> <p>PT NAD Client is part of an open SDK ecosystem designed to simplify integration with our products. Check out other related projects in the ecosystem:</p> <p>\ud83d\udd39py-ptsandbox \u2014 A python library for asynchronous interactions with the PT Sandbox API</p> <p>\ud83d\udd39sandbox-cli \u2014 CLI instrument for easy working with PT Sandbox</p>"},{"location":"CONTRIBUTING/","title":"\ud83e\udd1d Contributing Guide","text":"<p>Thank you for your interest in the project! Here's how you can contribute:</p>"},{"location":"CONTRIBUTING/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ol> <li>Fork the repository</li> <li>Create a new branch: <pre><code>git checkout -b feature/your_feature\n</code></pre></li> <li>Make all necessary changes</li> <li>Be sure to test your code</li> <li>Create a Pull Request to <code>main</code> or <code>dev</code> (confirm if unsure)</li> </ol>"},{"location":"CONTRIBUTING/#what-we-appreciate","title":"\u2705 What We Appreciate","text":"<ul> <li>Improving documentation</li> <li>Reporting issues</li> <li>New features (ideally after discussion)</li> <li>Adding new tests for existing functionality</li> </ul>"},{"location":"CONTRIBUTING/#code-style","title":"\ud83e\uddf9 Code Style","text":"<ul> <li>Follow formatting and style guidelines (eslint/black/prettier)</li> <li>Try to write meaningful commit messages: <pre><code>feature: Added support for X\nfix: Fixed bug Y\ndocs: Updated documentation\n</code></pre></li> </ul>"},{"location":"CONTRIBUTING/#want-to-help-with-translation","title":"\ud83c\udf10 Want to Help with Translation?","text":"<p>We aim to make the project accessible to as many people as possible. If you'd like to help translate into another language \u2014 it's very welcome!</p> <p>\ud83d\udcc4 Available translations: - en English (default) - \ud83c\uddf7\ud83c\uddfa Russian - \ud83c\udf10 Your language? Help us add it!</p> <p>To get started, simply create an issue to let us know.</p>"},{"location":"CONTRIBUTING/#best-practices","title":"\ud83d\udee0 Best Practices","text":"<ul> <li>Use stable dependency versions listed in <code>package.json</code> / <code>requirements.txt</code> / <code>pyproject.toml</code></li> <li>Follow the project's coding style (e.g., via <code>eslint</code>, <code>black</code>, <code>prettier</code>, etc.)</li> <li>Write readable and self-documenting code</li> <li>Try to cover new functionality with tests</li> <li>Before creating an issue \u2014 check if a similar one already exists</li> <li>Create feature branches and submit pull requests with clear descriptions</li> </ul>"},{"location":"CONTRIBUTING/#developer-certificate-of-origin-dco","title":"\u270d\ufe0f Developer Certificate of Origin (DCO)","text":"<p>Thank you for your contribution! To ensure transparency and legal clarity in the project, we use the Developer Certificate of Origin (DCO).</p>"},{"location":"DCO/","title":"Developer Certificate of Origin (DCO)","text":""},{"location":"DCO/#what-is-the-dco-and-why-is-it-needed","title":"What is the DCO and why is it needed?","text":"<p>The Developer Certificate of Origin (DCO) is a lightweight legal certification used in many open-source projects as an alternative to signing individual contributor agreements.</p> <p>By adding a sign-off line to a commit, the developer confirms their authorship or the legal right to submit the code, and grants the project the right to use and distribute the contribution under the project\u2019s license.</p> <p>Unlike a Contributor License Agreement (CLA), which is a separate signed document, the DCO is an assertion embedded in each commit message. This means each contribution is accompanied by a declaration of its origin and licensing, and the contributor takes responsibility for the legitimacy of the code by signing off on each commit.</p> <p>How the DCO works: A developer expresses their agreement with the terms of the DCO by adding a special \u201cSigned-off-by\u201d line at the end of each commit message. This line means the developer certifies the origin of the change.</p> <p><pre><code>\u26a0\ufe0f \u201cSigning a commit\u201d in the context of the DCO means adding a textual sign-off, not a GPG digital signature.\n</code></pre> Many well-known projects (such as the Linux kernel, Docker, GitLab, and others) require DCO sign-offs from all external contributors as part of their change acceptance process. This ensures transparency regarding who contributed code and whether they had the right to do so.</p>"},{"location":"DCO/#full-text-of-the-dco-version-11","title":"Full text of the DCO version 1.1","text":"<p>Original source: developercertificate.org</p> <p>Below is the full text of the Developer Certificate of Origin version 1.1</p> <pre><code>Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n</code></pre> <p>The project requiring DCO assumes that all contributors agree to this text. By adding the line \u201cSigned-off-by\u201d to a commit, you confirm that you have met the conditions listed in the DCO for that contribution.</p>"},{"location":"DCO/#how-to-sign-commits-dco-sign-off","title":"How to sign commits (DCO Sign-off)","text":"<p>To \u201csign\u201d your commit under the DCO, you need to add the following line at the end of your commit message:</p> <pre><code>Signed-off-by: Full Name &lt;youremail@example.com&gt;\n</code></pre> <p>You can manually add this line when writing the commit message. However, Git provides a convenient flag to do this automatically. Use the -s or --signoff option when creating a commit. For example:</p> <pre><code>git commit -s -m \"Added new feature X\"\n</code></pre> <pre><code>git commit --signoff -m \"Fixed bug in function Y\"\n</code></pre> <p>This command will automatically add the \u201cSigned-off-by\u201d line to the commit message, using the name and email from your Git configuration.</p> <p>Therefore, it is very important to properly configure the user.name and user.email settings in Git beforehand. Check that git config user.name contains your real name, and git config user.email \u2013 your email. To set them globally (for all repositories), use the following commands:</p> <pre><code>git config --global user.name \"Full Name\"\ngit config --global user.email \"youremail@example.com\"\n</code></pre> <p>These settings determine how you are identified in each commit (as the author) and are used to fill in the sign-off line.</p> <p>The name and email in the \u201cSigned-off-by\u201d line must exactly match the name and email of the commit author, otherwise, the DCO check may reject the sign-off.</p> <pre><code>\u26a0\ufe0f We expect your real name, not a nickname\n</code></pre> <p>When Git automatically adds a sign-off via -s, it uses exactly these settings. So make sure the email matches the one linked to your GitHub account, or the DCO bot may report a mismatch with the author.</p> <pre><code>\u26a0\ufe0f Do not confuse a DCO sign-off with a cryptographic commit signature. The DCO is just a textual declaration in the commit message, not a cryptographic verification. The -s flag adds the \u201cSigned-off-by\u201d line without any encryption. The -S flag, on the other hand, attaches a GPG digital signature to the commit to verify identity. DCO does not require this.\n\nIf you accidentally used git commit -S instead of -s, note that the DCO only checks for the presence of the line in the commit message. You can, of course, use both flags together (git commit -S -s) to digitally sign the commit and include the DCO sign-off. But -s alone is sufficient to meet the DCO requirement.\n</code></pre>"},{"location":"DCO/#typical-situations-and-how-to-add-a-dco-sign-off","title":"Typical Situations and How to Add a DCO Sign-off","text":"<p>Let's go over common situations involving a missing \u201cSigned-off-by\u201d line and how to fix them:</p>"},{"location":"DCO/#local-commit-without-dco-sign-off","title":"Local commit without DCO sign-off","text":"<p>Situation: You made one or more commits in your local repository but forgot to include the \u201cSigned-off-by\u201d line in the message. These commits haven't been pushed yet (e.g., no Pull Request has been created).</p> <p>Solution: The easiest way is to use the amend command to edit the last commit and add the sign-off instead of creating a new commit.</p> <pre><code>git commit --amend --signoff\n</code></pre> <p>or</p> <pre><code>git commit --amend -s\n</code></pre> <p>This command will open your last commit for editing (or automatically add the sign-off without changing the rest of the message if run with the --no-edit flag), and will include the \u201cSigned-off-by\u201d line with your name and email.</p> <p>The content of the commit (code changes) won't be changed, only the message. After this, the last commit will include the DCO sign-off.</p> <p>If there are multiple commits missing a sign-off, see the interactive rebase section. But for just the latest commit, this is enough.</p> <p>You can verify that the sign-off was added by running <code>git log -1</code> and checking that the message includes \u201cSigned-off-by: \u2026\u201d.</p>"},{"location":"DCO/#commit-already-pushed-to-github-without-a-sign-off","title":"Commit already pushed to GitHub without a sign-off","text":"<p>Situation: You've already pushed the commit(s) to the remote repository (e.g., opened a Pull Request), and the DCO bot reports an error because the commit message lacks the sign-off.</p> <p>Solution: You need to fix the commit history, add the sign-off, and force-push the updated history to GitHub. For just the last commit, you can use amend:</p> <pre><code>git commit --amend --signoff\ngit push --force origin &lt;branch_name&gt;\n</code></pre> <p>After this, the Pull Request on GitHub will be updated, and the DCO check should pass since the commit message now contains the required sign-off.</p> <p>If the unsigned commit is not the most recent one in the branch, you\u2019ll need to rewrite history a bit:</p> <ul> <li>You can do an interactive rebase (see the next scenario) and edit the message of the problematic commit.</li> <li>Or, if it\u2019s a single older commit, do a rebase from that commit and apply --signoff. For example: <code>git rebase --signoff SHA^</code> (where SHA is the hash of the problematic commit), which will replay all commits starting from that one and add sign-offs.</li> </ul> <p>In general, fixing a pushed commit comes down to editing it and rewriting the remote history.</p>"},{"location":"DCO/#multiple-commits-without-sign-offs","title":"Multiple commits without sign-offs","text":"<p>Situation: Your Pull Request contains several commits, and one or more of them are missing the \u201cSigned-off-by\u201d line. As a result, the DCO check fails. You need to sign all of these commits without losing their changes.</p> <p>Solution: Use Git's rebase functionality to add sign-offs to each commit. This can be done automatically or manually using interactive mode:</p>"},{"location":"DCO/#automatically-adding-sign-offs","title":"Automatically adding sign-offs:","text":"<p>You can use the --signoff option with the rebase command. It will automatically append \u201cSigned-off-by\u201d to each rebased commit. For example, if your last 3 commits in the branch are unsigned, run:</p> <pre><code>git rebase --signoff HEAD~3\n</code></pre> <p>Git will automatically modify the last 3 commits, adding the sign-off line (with your name and email from your settings) to each one. After completing the rebase, push the changes:</p> <pre><code>git push --force origin &lt;your-branch&gt;\n</code></pre>"},{"location":"DCO/#interactive-rebase-manual-method","title":"Interactive rebase (manual method):","text":"<p>You can use Git\u2019s interactive rebase mode. Suppose you have 3 unsigned commits. Run:</p> <pre><code>git rebase -i HEAD~3\n</code></pre> <p>An editor will open with a list of these commits. Change the word pick to reword for each commit.</p> <p>Close the editor, and Git will go through the commits one by one. For each commit, it will open your editor to change the message. In each message, simply add the line \u201cSigned-off-by: \u2026\u201d at the end. Save and exit.</p> <p>Alternatively, you can exit the editor without changing the message and run:</p> <pre><code>git commit --amend --no-edit --signoff\n</code></pre> <p>This command will automatically append the sign-off and commit it.</p> <p>To move to the next commit, run:</p> <pre><code>git rebase --continue\n</code></pre> <p>Repeat until all commits are updated. Then, push the updated branch to the remote:</p> <pre><code>git push --force origin &lt;your-branch&gt;\n</code></pre> <p>In some cases, if there are too many commits and editing them one-by-one is too time-consuming, you can squash all commits into one, add a single sign-off, and push again.</p> <p>This will remove intermediate commits but ensure that the final commit has the sign-off.</p> <pre><code>git rebase -i HEAD~N\n</code></pre> <p>In the command above, N is the number of commits. Mark the first commit as pick, and the others as squash. When the commit message editor opens, write the message and add the \u201cSigned-off-by\u201d line. Then force-push.</p> <pre><code>\u26a0\ufe0f Make sure this step is agreed upon with the maintainers \u2014 sometimes the commit history in a PR is important.\n</code></pre>"},{"location":"DCO/#sign-off-when-using-squashrebase-before-merging","title":"Sign-off when using squash/rebase before merging","text":"<p>Situation: You plan to squash your commits or rebase your branch onto the latest version of the main branch before merging, and want to ensure that all commits (or the final commit) have a DCO sign-off.</p> <p>What to consider:</p> <ul> <li>If you squash multiple commits that already have sign-offs, the resulting commit may contain several \u201cSigned-off-by\u201d lines (one for each original commit). This is fine. The DCO has no limit on the number of sign-offs \u2013 what matters is that at least one matches the final commit's author. It's common to retain all sign-offs after a squash to reflect contributions from multiple authors.</li> <li>If you squash commits where some lacked a sign-off, you must manually add a sign-off in the combined commit message. When running:</li> </ul> <p><pre><code>git rebase -i\n</code></pre>   with the squash flag, Git will open an editor for the commit message. Make sure to include the line \u201cSigned-off-by: Full Name youremail@example.com\u201d at the end of the message.</p> <p>You can copy it from one of the original commit messages (if it was present) or type it manually. - When you run</p> <pre><code>git rebase upstream/main\n</code></pre> <p>your commits are rewritten on top of the latest base. If they already had sign-offs, those will be preserved.</p> <pre><code>\ud83d\udca1 The simplest approach is to always use the -s option when committing. That way, you won\u2019t run into sign-off issues during rebase or squash.\n</code></pre>"},{"location":"DCO/#how-to-sign-a-commit-created-through-the-github-interface","title":"How to sign a commit created through the GitHub interface","text":"<p>When creating commits via the GitHub web interface, there's a caveat: by default, GitHub does not include a \u201cSigned-off-by:\u201d line required for DCO compliance.</p> <p>To manually add a sign-off, use the \"Extended description\" field of the commit and add a line in the format:</p> <pre><code>Signed-off-by: Your GitHub name &lt;youremail@example.com&gt;\n</code></pre> <p></p> <p>When creating commits through the GitHub web interface, a private email might be used automatically, like:</p> <pre><code>YourPrivateName@users.noreply.github.com\n</code></pre> <pre><code>\u26a0\ufe0f The DCO check requires the email in the sign-off to match the commit author's email.\n</code></pre> <p>If GitHub uses a noreply email, just sign the commit using the same address:</p> <pre><code>Signed-off-by: Your GitHub name &lt;YourPrivateName@users.noreply.github.com&gt;\n</code></pre> <p>Or disable email privacy: - Go to Settings \u2192 Emails - Uncheck \"Keep my email addresses private\"</p> <p></p>"},{"location":"DCO/#dco-bot-check-on-pull-request","title":"DCO Bot Check on Pull Request","text":"<p>When you create a Pull Request in a repository where DCO is enabled, an automated check is usually triggered \u2013 often via the DCO bot (GitHub App) or CI. This bot inspects each commit in your PR for a proper sign-off.</p> <p>In GitHub\u2019s interface, you\u2019ll see a status like: DCO \u2014 All commits have a DCO sign-off (if everything is fine) or an error message if something is wrong. DCO issues are usually marked with a red \u274c and a message like \u201cAll commits must have a DCO sign-off from the author.\u201d</p> <p>The DCO bot checks each commit message for two things: 1. The presence of a \u201cSigned-off-by:\u201d line. If any commit lacks it, the check fails. 2. Matching name and email between the sign-off line and the commit author\u2019s info.</p> <p>For example, if the commit author is \u201cJohn Doe doe@example.com\u201d, the bot expects to see \u201cSigned-off-by: John Doe doe@example.com\u201d. If it\u2019s Jhon doe@example.com\u201d (missing the last name) or the email differs even slightly, the check fails.</p> <p>When the DCO check fails, the bot usually leaves a comment on the PR pointing out the issue. It may reference the commit hash and the reason: \u201cMissing Signed-off-by\u201d or \u201cExpected Signed-off-by: X, but got Y.\u201d It may also suggest git commands to fix the problem.</p> <p>In essence, the bot guides you on how to make your PR compliant.</p> <pre><code>\u26a0\ufe0f The bot doesn\u2019t check the legitimacy of the code and is unrelated to a CLA \u2013 it only looks at the commit message format. So even if all your tests pass, the DCO check must be green for GitHub to allow a merge.\n</code></pre>"},{"location":"reference/","title":"Init","text":""},{"location":"reference/#ptnad.PTNADClient","title":"ptnad.PTNADClient","text":"<pre><code>PTNADClient(base_url: str, verify_ssl: bool = True)\n</code></pre> Source code in <code>src/ptnad/client.py</code> <pre><code>def __init__(self, base_url: str, verify_ssl: bool = True) -&gt; None:\n    self.base_url = base_url.rstrip(\"/\") + \"/api/v2/\"\n    self.verify_ssl = verify_ssl\n    self.session = requests.Session()\n    self.session.verify = self.verify_ssl\n    if not self.verify_ssl:\n        warnings.simplefilter(\"ignore\", InsecureRequestWarning)\n    self.csrf_token = None\n    self.auth = Auth(self)\n    self.monitoring = MonitoringAPI(self)\n    self.signatures = SignaturesAPI(self)\n    self.replists = RepListsAPI(self)\n    self.sources = SourcesAPI(self)\n    self.sensors = SensorsAPI(self)\n    self.variables = VariablesAPI(self)\n    self.hosts = HostsAPI(self)\n    self.bql = BQLAPI(self)\n    self.filters = FiltersAPI(self)\n</code></pre>"},{"location":"reference/#ptnad.PTNADException","title":"ptnad.PTNADException","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all PTNAD-related errors.</p>"},{"location":"reference/#ptnad.PTNADAPIError","title":"ptnad.PTNADAPIError","text":"<pre><code>PTNADAPIError(message, status_code=None, response=None, operation=None)\n</code></pre> <p>               Bases: <code>PTNADException</code></p> <p>Exception raised for errors in the API.</p> Source code in <code>src/ptnad/exceptions.py</code> <pre><code>def __init__(self, message, status_code=None, response=None, operation=None):\n    self.message = message\n    self.status_code = status_code\n    self.response = response\n    self.operation = operation\n\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/auth/","title":"Auth","text":""},{"location":"reference/auth/#ptnad.auth.AuthStrategy","title":"ptnad.auth.AuthStrategy","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"reference/auth/#ptnad.auth.LocalAuth","title":"ptnad.auth.LocalAuth","text":"<pre><code>LocalAuth(username: str, password: str)\n</code></pre> <p>               Bases: <code>AuthStrategy</code></p> Source code in <code>src/ptnad/auth.py</code> <pre><code>def __init__(self, username: str, password: str) -&gt; None:\n    self.username = username\n    self.password = password\n</code></pre>"},{"location":"reference/auth/#ptnad.auth.SSOAuth","title":"ptnad.auth.SSOAuth","text":"<pre><code>SSOAuth(sso_url: str, client_id: str, client_secret: str, username: str, password: str, sso_type: str | None = None)\n</code></pre> <p>               Bases: <code>AuthStrategy</code></p> Source code in <code>src/ptnad/auth.py</code> <pre><code>def __init__(\n    self,\n    sso_url: str,\n    client_id: str,\n    client_secret: str,\n    username: str,\n    password: str,\n    sso_type: str | None = None\n) -&gt; None:\n    self.sso_url = sso_url\n    self.client_id = client_id\n    self.client_secret = client_secret\n    self.username = username\n    self.password = password\n    self.sso_type = sso_type\n</code></pre>"},{"location":"reference/auth/#ptnad.auth.Auth","title":"ptnad.auth.Auth","text":"<pre><code>Auth(client: Any)\n</code></pre> Source code in <code>src/ptnad/auth.py</code> <pre><code>def __init__(self, client: Any) -&gt; None:\n    self.client = client\n    self.strategy: AuthStrategy | None = None\n</code></pre>"},{"location":"reference/client/","title":"Client","text":""},{"location":"reference/client/#ptnad.client.PTNADClient","title":"ptnad.client.PTNADClient","text":"<pre><code>PTNADClient(base_url: str, verify_ssl: bool = True)\n</code></pre> Source code in <code>src/ptnad/client.py</code> <pre><code>def __init__(self, base_url: str, verify_ssl: bool = True) -&gt; None:\n    self.base_url = base_url.rstrip(\"/\") + \"/api/v2/\"\n    self.verify_ssl = verify_ssl\n    self.session = requests.Session()\n    self.session.verify = self.verify_ssl\n    if not self.verify_ssl:\n        warnings.simplefilter(\"ignore\", InsecureRequestWarning)\n    self.csrf_token = None\n    self.auth = Auth(self)\n    self.monitoring = MonitoringAPI(self)\n    self.signatures = SignaturesAPI(self)\n    self.replists = RepListsAPI(self)\n    self.sources = SourcesAPI(self)\n    self.sensors = SensorsAPI(self)\n    self.variables = VariablesAPI(self)\n    self.hosts = HostsAPI(self)\n    self.bql = BQLAPI(self)\n    self.filters = FiltersAPI(self)\n</code></pre>"},{"location":"reference/exceptions/","title":"Exception","text":""},{"location":"reference/exceptions/#ptnad.exceptions.PTNADException","title":"ptnad.exceptions.PTNADException","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all PTNAD-related errors.</p>"},{"location":"reference/exceptions/#ptnad.exceptions.PTNADAPIError","title":"ptnad.exceptions.PTNADAPIError","text":"<pre><code>PTNADAPIError(message, status_code=None, response=None, operation=None)\n</code></pre> <p>               Bases: <code>PTNADException</code></p> <p>Exception raised for errors in the API.</p> Source code in <code>src/ptnad/exceptions.py</code> <pre><code>def __init__(self, message, status_code=None, response=None, operation=None):\n    self.message = message\n    self.status_code = status_code\n    self.response = response\n    self.operation = operation\n\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/exceptions/#ptnad.exceptions.AuthenticationError","title":"ptnad.exceptions.AuthenticationError","text":"<p>               Bases: <code>PTNADException</code></p> <p>Exception raised for authentication errors.</p>"},{"location":"reference/exceptions/#ptnad.exceptions.ValidationError","title":"ptnad.exceptions.ValidationError","text":"<p>               Bases: <code>PTNADException</code></p> <p>Exception raised for validation errors.</p>"},{"location":"reference/api/","title":"Init","text":""},{"location":"reference/api/#ptnad.api.BQLAPI","title":"ptnad.api.BQLAPI","text":"<pre><code>BQLAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>execute</code> <p>Execute a BQL query on a specific source.</p> <code>execute_raw</code> <p>Execute a BQL query on a specific source and return the full response.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def __init__(self, client) -&gt; None:\n    self.client = client\n</code></pre>"},{"location":"reference/api/#ptnad.api.BQLAPI.execute","title":"execute","text":"<pre><code>execute(query: str, source: str = '2') -&gt; Any\n</code></pre> <p>Execute a BQL query on a specific source.</p> <p>Args:     query (str): The BQL query to execute.     source (str): The identifier of the storage to query. Defaults to \"2\" (live).</p> <p>Returns:     Any: The result of the query execution.</p> <p>Raises:     PTNADAPIError: If there's an error executing the query.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def execute(self, query: str, source: str = \"2\") -&gt; Any:\n    \"\"\"\n    Execute a BQL query on a specific source.\n\n    Args:\n        query (str): The BQL query to execute.\n        source (str): The identifier of the storage to query. Defaults to \"2\" (live).\n\n    Returns:\n        Any: The result of the query execution.\n\n    Raises:\n        PTNADAPIError: If there's an error executing the query.\n\n    \"\"\"\n    try:\n        response = self._send_query(query, source)\n        return response[\"result\"]\n    except PTNADAPIError as e:\n        e.operation = \"execute BQL query\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to execute BQL query: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.BQLAPI.execute_raw","title":"execute_raw","text":"<pre><code>execute_raw(query: str, source: str = '2') -&gt; BQLResponse\n</code></pre> <p>Execute a BQL query on a specific source and return the full response.</p> <p>Args:     query (str): The BQL query to execute.     source (str): The identifier of the storage to query. Defaults to \"2\" (live).</p> <p>Returns:     BQLResponse: An object containing the query results, execution time, total hits, and debug info.</p> <p>Raises:     PTNADAPIError: If there's an error executing the query.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def execute_raw(self, query: str, source: str = \"2\") -&gt; BQLResponse:\n    \"\"\"\n    Execute a BQL query on a specific source and return the full response.\n\n    Args:\n        query (str): The BQL query to execute.\n        source (str): The identifier of the storage to query. Defaults to \"2\" (live).\n\n    Returns:\n        BQLResponse: An object containing the query results, execution time, total hits, and debug info.\n\n    Raises:\n        PTNADAPIError: If there's an error executing the query.\n\n    \"\"\"\n    try:\n        response = self._send_query(query, source)\n        return BQLResponse(\n            result=response[\"result\"],\n            took=response[\"took\"],\n            total=response[\"total\"],\n            debug=response.get(\"debug\")\n        )\n    except PTNADAPIError as e:\n        e.operation = \"execute BQL query\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to execute BQL query: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI","title":"ptnad.api.MonitoringAPI","text":"<pre><code>MonitoringAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>get_active_triggers</code> <p>Get all active triggers (triggers with status other than 'green').</p> <code>get_status</code> <p>Get the current status.</p> <code>get_trigger_by_id</code> <p>Get a specific trigger by its ID.</p> <code>get_triggers</code> <p>Get the list of triggers.</p> <code>get_triggers_by_type</code> <p>Get all triggers of a specific type.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def __init__(self, client) -&gt; None:\n    self.client = client\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI.get_active_triggers","title":"get_active_triggers","text":"<pre><code>get_active_triggers() -&gt; List[Trigger]\n</code></pre> <p>Get all active triggers (triggers with status other than 'green').</p> <p>Returns:     List[Trigger]: A list of active Trigger objects.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_active_triggers(self) -&gt; List[Trigger]:\n    \"\"\"\n    Get all active triggers (triggers with status other than 'green').\n\n    Returns:\n        List[Trigger]: A list of active Trigger objects.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n\n    \"\"\"\n    triggers = self.get_triggers()\n    return [trigger for trigger in triggers if trigger.status != \"green\"]\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI.get_status","title":"get_status","text":"<pre><code>get_status() -&gt; MonitoringStatus\n</code></pre> <p>Get the current status.</p> <p>Returns:     MonitoringStatus: An object containing the current status and any problems.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the status.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_status(self) -&gt; MonitoringStatus:\n    \"\"\"\n    Get the current status.\n\n    Returns:\n        MonitoringStatus: An object containing the current status and any problems.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the status.\n\n    \"\"\"\n    try:\n        response = self.client.get(\"/monitoring/status\").json()\n        return MonitoringStatus(**response)\n    except PTNADAPIError as e:\n        e.operation = \"get monitoring status\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get monitoring status: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI.get_trigger_by_id","title":"get_trigger_by_id","text":"<pre><code>get_trigger_by_id(trigger_id: str) -&gt; Trigger | None\n</code></pre> <p>Get a specific trigger by its ID.</p> <p>Args:     trigger_id (str): The ID of the trigger to retrieve.</p> <p>Returns:     Optional[Trigger]: The Trigger object if found, None otherwise.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the trigger.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_trigger_by_id(self, trigger_id: str) -&gt; Trigger | None:\n    \"\"\"\n    Get a specific trigger by its ID.\n\n    Args:\n        trigger_id (str): The ID of the trigger to retrieve.\n\n    Returns:\n        Optional[Trigger]: The Trigger object if found, None otherwise.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the trigger.\n\n    \"\"\"\n    triggers = self.get_triggers()\n    return next((trigger for trigger in triggers if trigger.id == trigger_id), None)\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI.get_triggers","title":"get_triggers","text":"<pre><code>get_triggers() -&gt; List[Trigger]\n</code></pre> <p>Get the list of triggers.</p> <p>Returns:     List[Trigger]: A list of Trigger objects.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_triggers(self) -&gt; List[Trigger]:\n    \"\"\"\n    Get the list of triggers.\n\n    Returns:\n        List[Trigger]: A list of Trigger objects.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n\n    \"\"\"\n    try:\n        response = self.client.get(\"/monitoring/triggers\").json()\n        return [Trigger(**trigger) for trigger in response.get(\"results\", [])]\n    except PTNADAPIError as e:\n        e.operation = \"get triggers\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get triggers: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI.get_triggers_by_type","title":"get_triggers_by_type","text":"<pre><code>get_triggers_by_type(trigger_type: str) -&gt; List[Trigger]\n</code></pre> <p>Get all triggers of a specific type.</p> <p>Args:     trigger_type (str): The type of triggers to retrieve.</p> <p>Returns:     List[Trigger]: A list of Trigger objects of the specified type.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_triggers_by_type(self, trigger_type: str) -&gt; List[Trigger]:\n    \"\"\"\n    Get all triggers of a specific type.\n\n    Args:\n        trigger_type (str): The type of triggers to retrieve.\n\n    Returns:\n        List[Trigger]: A list of Trigger objects of the specified type.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n\n    \"\"\"\n    triggers = self.get_triggers()\n    return [trigger for trigger in triggers if trigger.type == trigger_type]\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI","title":"ptnad.api.RepListsAPI","text":"<pre><code>RepListsAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>add_dynamic_list_item</code> <p>Add an item to a dynamic reputation list.</p> <code>bulk_add_items</code> <p>Add multiple items to a dynamic reputation list.</p> <code>bulk_delete_items</code> <p>Delete multiple items from a dynamic reputation list.</p> <code>create_list</code> <p>Create a new reputation list.</p> <code>delete_list</code> <p>Delete a reputation list.</p> <code>get_all_lists</code> <p>Get all reputation lists using pagination.</p> <code>get_dynamic_list_items</code> <p>Get items from a dynamic reputation list.</p> <code>get_list</code> <p>Get information about a specific reputation list.</p> <code>get_lists</code> <p>Get a list of reputation lists.</p> <code>get_stats</code> <p>Get statistics about reputation lists.</p> <code>remove_item</code> <p>Remove an item from a dynamic reputation list.</p> <code>update_list</code> <p>Update a reputation list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def __init__(self, client) -&gt; None:\n    self.client = client\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.add_dynamic_list_item","title":"add_dynamic_list_item","text":"<pre><code>add_dynamic_list_item(external_key: str, value: str, attributes: Dict[str, Any] | None = None) -&gt; Dict[str, Any]\n</code></pre> <p>Add an item to a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     value (str): Value to add to the list.     attributes (Optional[Dict[str, Any]]): Additional attributes for the item.</p> <p>Returns:     Dict[str, Any]: Information about the added item.</p> <p>Raises:     PTNADAPIError: If there's an error adding the item.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def add_dynamic_list_item(self, external_key: str, value: str, attributes: Dict[str, Any] | None = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add an item to a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        value (str): Value to add to the list.\n        attributes (Optional[Dict[str, Any]]): Additional attributes for the item.\n\n    Returns:\n        Dict[str, Any]: Information about the added item.\n\n    Raises:\n        PTNADAPIError: If there's an error adding the item.\n\n    \"\"\"\n    try:\n        response = self.client.post(f\"/replists/dynamic/{external_key}/{value}\", json=attributes or {})\n        if response.status_code in (200, 201):\n            return response.json()\n        raise PTNADAPIError(f\"Failed to add item to reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"add item to reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to add item to reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.bulk_add_items","title":"bulk_add_items","text":"<pre><code>bulk_add_items(external_key: str, items: List[Dict[str, Any]]) -&gt; None\n</code></pre> <p>Add multiple items to a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     items (List[Dict[str, Any]]): List of items to add, each item should have 'value' and optionally 'attrs'.</p> <p>Raises:     PTNADAPIError: If there's an error adding the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def bulk_add_items(self, external_key: str, items: List[Dict[str, Any]]) -&gt; None:\n    \"\"\"\n    Add multiple items to a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        items (List[Dict[str, Any]]): List of items to add, each item should have 'value' and optionally 'attrs'.\n\n    Raises:\n        PTNADAPIError: If there's an error adding the items.\n\n    \"\"\"\n    try:\n        self.client.post(f\"/replists/dynamic/{external_key}/_bulk\", json=items)\n    except PTNADAPIError as e:\n        e.operation = f\"bulk add items to reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to bulk add items to reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.bulk_delete_items","title":"bulk_delete_items","text":"<pre><code>bulk_delete_items(external_key: str, values: List[str]) -&gt; None\n</code></pre> <p>Delete multiple items from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     values (List[str]): List of values to delete from the list.</p> <p>Raises:     PTNADAPIError: If there's an error deleting the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def bulk_delete_items(self, external_key: str, values: List[str]) -&gt; None:\n    \"\"\"\n    Delete multiple items from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        values (List[str]): List of values to delete from the list.\n\n    Raises:\n        PTNADAPIError: If there's an error deleting the items.\n\n    \"\"\"\n    try:\n        response = self.client.post(f\"/replists/dynamic/{external_key}/_delete\", json=values)\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to bulk delete items from reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"bulk delete items from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to bulk delete items from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.create_list","title":"create_list","text":"<pre><code>create_list(name: str, type: str, color: str, description: str | None = None, content: Union[str, List[str], None] = None, external_key: str | None = None) -&gt; Dict[str, Any]\n</code></pre> <p>Create a new reputation list.</p> <p>Args:     name (str): Name of the reputation list. Must be a valid slug (letters, numbers, underscores, hyphens).     type (str): Type of the reputation list ('ip', 'dn', 'uri', or 'md5').     color (str): Color code for the reputation list ('0' to '7').     description (Optional[str]): Description of the reputation list.     content (Optional[Union[str, List[str]]]): Content of the reputation list. Can be a string or a list of strings that will be joined with newlines.     external_key (Optional[str]): External key for the reputation list.</p> <p>Returns:     Dict[str, Any]: Information about the created reputation list.</p> <p>Raises:     ValidationError: If the input parameters are invalid.     PTNADAPIError: If there's an error creating the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def create_list(self, name: str, type: str, color: str, description: str | None = None,\n                content: Union[str, List[str], None] = None, external_key: str | None = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new reputation list.\n\n    Args:\n        name (str): Name of the reputation list. Must be a valid slug (letters, numbers, underscores, hyphens).\n        type (str): Type of the reputation list ('ip', 'dn', 'uri', or 'md5').\n        color (str): Color code for the reputation list ('0' to '7').\n        description (Optional[str]): Description of the reputation list.\n        content (Optional[Union[str, List[str]]]): Content of the reputation list. Can be a string or a list of strings that will be joined with newlines.\n        external_key (Optional[str]): External key for the reputation list.\n\n    Returns:\n        Dict[str, Any]: Information about the created reputation list.\n\n    Raises:\n        ValidationError: If the input parameters are invalid.\n        PTNADAPIError: If there's an error creating the list.\n\n    \"\"\"\n    if not self._is_valid_slug(name):\n        raise ValidationError(\"Name must be a valid slug consisting of letters, numbers, underscores or hyphens.\")\n\n    data = {\n        \"name\": name,\n        \"type\": type,\n        \"color\": color,\n    }\n    if description:\n        data[\"description\"] = description\n    if content:\n        # Convert list of strings to newline-separated string if needed\n        if isinstance(content, list):\n            data[\"content\"] = \"\\n\".join(content)\n        else:\n            data[\"content\"] = content\n    if external_key:\n        data[\"external_key\"] = external_key\n\n    try:\n        response = self.client.post(\"/replists\", json=data)\n        if response.status_code == 201:\n            return response.json()\n        error_message = response.json() if response.headers.get(\"Content-Type\") == \"application/json\" else response.text\n        raise PTNADAPIError(f\"Failed to create reputation list. Status code: {response.status_code}. Error: {error_message}\")\n    except PTNADAPIError as e:\n        e.operation = \"create reputation list\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to create reputation list: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.delete_list","title":"delete_list","text":"<pre><code>delete_list(list_id: int) -&gt; None\n</code></pre> <p>Delete a reputation list.</p> <p>Args:     list_id (int): ID of the reputation list to delete.</p> <p>Raises:     PTNADAPIError: If there's an error deleting the reputation list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def delete_list(self, list_id: int) -&gt; None:\n    \"\"\"\n    Delete a reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list to delete.\n\n    Raises:\n        PTNADAPIError: If there's an error deleting the reputation list.\n\n    \"\"\"\n    try:\n        response = self.client.delete(f\"/replists/{list_id}\")\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to delete reputation list {list_id}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"delete reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to delete reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.get_all_lists","title":"get_all_lists","text":"<pre><code>get_all_lists(search: str | None = None, ordering: str | None = None, limit: int = 100) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get all reputation lists using pagination.</p> <p>Args:     search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.     ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix with '-' for descending order.     limit (int): Number of lists to fetch per request (default: 100).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing all reputation list information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the lists.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_all_lists(self, search: str | None = None, ordering: str | None = None,\n                  limit: int = 100) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get all reputation lists using pagination.\n\n    Args:\n        search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.\n        ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix with '-' for descending order.\n        limit (int): Number of lists to fetch per request (default: 100).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing all reputation list information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the lists.\n\n    \"\"\"\n    all_lists = []\n    offset = 0\n\n    while True:\n        response = self._get_lists_data(search, ordering, limit, offset)\n        lists = response[\"results\"]\n        all_lists.extend(lists)\n\n        if response[\"next\"] is None:\n            break\n\n        offset += limit\n\n    return all_lists\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.get_dynamic_list_items","title":"get_dynamic_list_items","text":"<pre><code>get_dynamic_list_items(external_key: str, ordering: str | None = None) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get items from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     ordering (Optional[str]): Field to sort the results by (value or modified).</p> <p>Returns:     List[Dict[str, Any]]: List of items in the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_dynamic_list_items(self, external_key: str, ordering: str | None = None) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get items from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        ordering (Optional[str]): Field to sort the results by (value or modified).\n\n    Returns:\n        List[Dict[str, Any]]: List of items in the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the items.\n\n    \"\"\"\n    params = {}\n    if ordering:\n        params[\"ordering\"] = ordering\n\n    try:\n        response = self.client.get(f\"/replists/dynamic/{external_key}\", params=params).json()\n        return response[\"results\"]\n    except PTNADAPIError as e:\n        e.operation = f\"get items from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get items from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.get_list","title":"get_list","text":"<pre><code>get_list(list_id: int) -&gt; Dict[str, Any]\n</code></pre> <p>Get information about a specific reputation list.</p> <p>Args:     list_id (int): ID of the reputation list.</p> <p>Returns:     Dict[str, Any]: Information about the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_list(self, list_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get information about a specific reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list.\n\n    Returns:\n        Dict[str, Any]: Information about the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the list.\n\n    \"\"\"\n    try:\n        response = self.client.get(f\"/replists/{list_id}\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"get reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.get_lists","title":"get_lists","text":"<pre><code>get_lists(search: str | None = None, ordering: str | None = None, limit: int = 100, offset: int = 0) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of reputation lists.</p> <p>Args:     search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.     ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix '-' for descending order.     limit (int): Maximum number of lists to return (default: 100).     offset (int): Number of lists to skip (default: 0).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing reputation list information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the lists.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_lists(self, search: str | None = None, ordering: str | None = None,\n              limit: int = 100, offset: int = 0) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of reputation lists.\n\n    Args:\n        search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.\n        ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix '-' for descending order.\n        limit (int): Maximum number of lists to return (default: 100).\n        offset (int): Number of lists to skip (default: 0).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing reputation list information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the lists.\n\n    \"\"\"\n    response = self._get_lists_data(search, ordering, limit, offset)\n    return response[\"results\"]\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.get_stats","title":"get_stats","text":"<pre><code>get_stats() -&gt; Dict[str, Any]\n</code></pre> <p>Get statistics about reputation lists.</p> <p>Returns:     Dict[str, Any]: Statistics about reputation lists.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the statistics.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_stats(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get statistics about reputation lists.\n\n    Returns:\n        Dict[str, Any]: Statistics about reputation lists.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the statistics.\n\n    \"\"\"\n    try:\n        response = self.client.get(\"/replists/stats\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = \"get reputation lists statistics\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get reputation lists statistics: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.remove_item","title":"remove_item","text":"<pre><code>remove_item(external_key: str, value: str) -&gt; None\n</code></pre> <p>Remove an item from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     value (str): Value to remove from the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error removing the item.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def remove_item(self, external_key: str, value: str) -&gt; None:\n    \"\"\"\n    Remove an item from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        value (str): Value to remove from the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error removing the item.\n\n    \"\"\"\n    try:\n        response = self.client.delete(f\"/replists/dynamic/{external_key}/{value}\")\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to remove item from reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"remove item from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to remove item from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.update_list","title":"update_list","text":"<pre><code>update_list(list_id: int, **kwargs) -&gt; Dict[str, Any]\n</code></pre> <p>Update a reputation list.</p> <p>Args:     list_id (int): ID of the reputation list to update.     **kwargs: Fields to update (color, name, type, description, content).</p> <p>Returns:     Dict[str, Any]: Updated information about the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error updating the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def update_list(self, list_id: int, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update a reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list to update.\n        **kwargs: Fields to update (color, name, type, description, content).\n\n    Returns:\n        Dict[str, Any]: Updated information about the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error updating the list.\n\n    \"\"\"\n    try:\n        response = self.client.patch(f\"/replists/{list_id}\", json=kwargs).json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"update reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to update reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI","title":"ptnad.api.SignaturesAPI","text":"<pre><code>SignaturesAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>apply_changes</code> <p>Apply changes made to Rules and commit them to sensors.</p> <code>get_classes</code> <p>Get a list of signature classes.</p> <code>get_rule</code> <p>Get information about a specific Rule.</p> <code>get_rules</code> <p>Get a list of Rules.</p> <code>get_stats</code> <p>Get statistics about Rules.</p> <code>revert_changes</code> <p>Revert changes made to Rules.</p> <code>update_rule</code> <p>Update a Rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def __init__(self, client) -&gt; None:\n    self.client = client\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.apply_changes","title":"apply_changes","text":"<pre><code>apply_changes() -&gt; Dict[str, str]\n</code></pre> <p>Apply changes made to Rules and commit them to sensors.</p> <p>Returns:     Dict[str, str]: A dictionary with the hashsum of the package.</p> <p>Raises:     PTNADAPIError: If there's an error applying the changes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def apply_changes(self) -&gt; Dict[str, str]:\n    \"\"\"\n    Apply changes made to Rules and commit them to sensors.\n\n    Returns:\n        Dict[str, str]: A dictionary with the hashsum of the package.\n\n    Raises:\n        PTNADAPIError: If there's an error applying the changes.\n\n    \"\"\"\n    try:\n        response = self.client.post(\"/signatures/commit\").json()\n        if \"hashsum\" in response:\n            return response\n        if \"fatal_error\" in response or \"other_errors\" in response:\n            errors = []\n            if response.get(\"fatal_error\"):\n                errors.append(response[\"fatal_error\"])\n            if response.get(\"other_errors\"):\n                errors.extend(response[\"other_errors\"])\n            raise PTNADAPIError(f\"Failed to commit signature changes: {', '.join(errors)}\")\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"commit signature changes: {', '.join(errors)}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to apply Rule changes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.get_classes","title":"get_classes","text":"<pre><code>get_classes(search: str | None = None, ordering: str | None = None, **filters) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of signature classes.</p> <p>Args:     search (Optional[str]): Keyword to filter the classes.     ordering (Optional[str]): Field to sort the results by.     **filters: Additional filters (name, title, priority).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing signature class information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the classes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_classes(self, search: str | None = None, ordering: str | None = None, **filters) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of signature classes.\n\n    Args:\n        search (Optional[str]): Keyword to filter the classes.\n        ordering (Optional[str]): Field to sort the results by.\n        **filters: Additional filters (name, title, priority).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing signature class information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the classes.\n\n    \"\"\"\n    params = {k: v for k, v in filters.items() if v is not None}\n    if search:\n        params[\"search\"] = search\n    if ordering:\n        params[\"ordering\"] = ordering\n\n    try:\n        response = self.client.get(\"/signatures/classes\", params=params).json()\n        return response[\"results\"]\n    except PTNADAPIError as e:\n        e.operation = \"get signature classes\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get signature classes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.get_rule","title":"get_rule","text":"<pre><code>get_rule(rule_id: int) -&gt; Dict[str, Any]\n</code></pre> <p>Get information about a specific Rule.</p> <p>Args:     rule_id (int): sid of the Rule.</p> <p>Returns:     Dict[str, Any]: Information about the Rule.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_rule(self, rule_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get information about a specific Rule.\n\n    Args:\n        rule_id (int): sid of the Rule.\n\n    Returns:\n        Dict[str, Any]: Information about the Rule.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the rule.\n\n    \"\"\"\n    try:\n        response = self.client.get(f\"/signatures/rules/{rule_id}\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"get Rule {rule_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get rule {rule_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.get_rules","title":"get_rules","text":"<pre><code>get_rules(search: str | None = None, ordering: str | None = None, limit: int = 100, offset: int = 0, **filters) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of Rules.</p> <p>Args:     search (Optional[str]): Keyword to filter the rules.     ordering (Optional[str]): Field to sort the results by.     limit (int): Maximum number of rules to return (default: 100).     offset (int): Number of rules to skip (default: 0).     *filters: Additional filters. Available filters:         sid: Filter by sid (can be a single value or a list)         sid__gte: sid greater than or equal to         sid__lt: sid less than         vendor: Filter by vendor name (can be a single value or a list)         enabled: Filter by enabled status (true or false)         has_redef: Filter by has_redef status (true or false)         has_exceptions: Filter by has_exceptions status (true or false)         priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)         cls: Filter by class name (can be a single value or a list)         diff: Filter by rule changes, valid values (can be a list): added (+), updated (), removed (-), unchanged (=). Available in 12.2+         has_error: Filter by has_error status (true or false)         client: Search for IP address in src_adr and dst_adr         server: Search for IP address in src_adr and dst_adr</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing Rule information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the rules.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_rules(self, search: str | None = None, ordering: str | None = None,\n              limit: int = 100, offset: int = 0, **filters) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of Rules.\n\n    Args:\n        search (Optional[str]): Keyword to filter the rules.\n        ordering (Optional[str]): Field to sort the results by.\n        limit (int): Maximum number of rules to return (default: 100).\n        offset (int): Number of rules to skip (default: 0).\n        **filters: Additional filters. Available filters:\n            sid: Filter by sid (can be a single value or a list)\n            sid__gte: sid greater than or equal to\n            sid__lt: sid less than\n            vendor: Filter by vendor name (can be a single value or a list)\n            enabled: Filter by enabled status (true or false)\n            has_redef: Filter by has_redef status (true or false)\n            has_exceptions: Filter by has_exceptions status (true or false)\n            priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)\n            cls: Filter by class name (can be a single value or a list)\n            diff: Filter by rule changes, valid values (can be a list): added (+), updated (*), removed (-), unchanged (=). Available in 12.2+\n            has_error: Filter by has_error status (true or false)\n            client: Search for IP address in src_adr and dst_adr\n            server: Search for IP address in src_adr and dst_adr\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing Rule information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the rules.\n\n    \"\"\"\n    response = self._get_rules_data(search, ordering, limit, offset, **filters)\n    return response[\"results\"]\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.get_stats","title":"get_stats","text":"<pre><code>get_stats() -&gt; Dict[str, Any]\n</code></pre> <p>Get statistics about Rules.</p> <p>Returns:     Dict[str, Any]: Statistics about Rules.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the statistics.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_stats(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get statistics about Rules.\n\n    Returns:\n        Dict[str, Any]: Statistics about Rules.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the statistics.\n\n    \"\"\"\n    try:\n        response = self.client.get(\"/signatures/stats\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = \"get Rules statistics\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get Rules statistics: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.revert_changes","title":"revert_changes","text":"<pre><code>revert_changes() -&gt; None\n</code></pre> <p>Revert changes made to Rules.</p> <p>Raises:     PTNADAPIError: If there's an error reverting the changes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def revert_changes(self) -&gt; None:\n    \"\"\"\n    Revert changes made to Rules.\n\n    Raises:\n        PTNADAPIError: If there's an error reverting the changes.\n\n    \"\"\"\n    try:\n        self.client.post(\"/signatures/rollback\")\n    except PTNADAPIError as e:\n        e.operation = \"revert Rule changes\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to revert Rule changes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.update_rule","title":"update_rule","text":"<pre><code>update_rule(rule_id: int, **kwargs) -&gt; Dict[str, Any]\n</code></pre> <p>Update a Rule.</p> <p>Args:     rule_id (int): ID of the Rule to update.     **kwargs: Fields to update (enabled, action, msg, etc.).</p> <p>Returns:     Dict[str, Any]: Updated information about the Rule.</p> <p>Raises:     PTNADAPIError: If there's an error updating the rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def update_rule(self, rule_id: int, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update a Rule.\n\n    Args:\n        rule_id (int): ID of the Rule to update.\n        **kwargs: Fields to update (enabled, action, msg, etc.).\n\n    Returns:\n        Dict[str, Any]: Updated information about the Rule.\n\n    Raises:\n        PTNADAPIError: If there's an error updating the rule.\n\n    \"\"\"\n    try:\n        response = self.client.patch(f\"/signatures/rules/{rule_id}\", json=kwargs).json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"update Rule {rule_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to update Rule {rule_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/bql/","title":"BQL","text":""},{"location":"reference/api/bql/#ptnad.api.bql.BQLAPI","title":"ptnad.api.bql.BQLAPI","text":"<pre><code>BQLAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>execute</code> <p>Execute a BQL query on a specific source.</p> <code>execute_raw</code> <p>Execute a BQL query on a specific source and return the full response.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def __init__(self, client) -&gt; None:\n    self.client = client\n</code></pre>"},{"location":"reference/api/bql/#ptnad.api.bql.BQLAPI.execute","title":"execute","text":"<pre><code>execute(query: str, source: str = '2') -&gt; Any\n</code></pre> <p>Execute a BQL query on a specific source.</p> <p>Args:     query (str): The BQL query to execute.     source (str): The identifier of the storage to query. Defaults to \"2\" (live).</p> <p>Returns:     Any: The result of the query execution.</p> <p>Raises:     PTNADAPIError: If there's an error executing the query.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def execute(self, query: str, source: str = \"2\") -&gt; Any:\n    \"\"\"\n    Execute a BQL query on a specific source.\n\n    Args:\n        query (str): The BQL query to execute.\n        source (str): The identifier of the storage to query. Defaults to \"2\" (live).\n\n    Returns:\n        Any: The result of the query execution.\n\n    Raises:\n        PTNADAPIError: If there's an error executing the query.\n\n    \"\"\"\n    try:\n        response = self._send_query(query, source)\n        return response[\"result\"]\n    except PTNADAPIError as e:\n        e.operation = \"execute BQL query\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to execute BQL query: {str(e)}\")\n</code></pre>"},{"location":"reference/api/bql/#ptnad.api.bql.BQLAPI.execute_raw","title":"execute_raw","text":"<pre><code>execute_raw(query: str, source: str = '2') -&gt; BQLResponse\n</code></pre> <p>Execute a BQL query on a specific source and return the full response.</p> <p>Args:     query (str): The BQL query to execute.     source (str): The identifier of the storage to query. Defaults to \"2\" (live).</p> <p>Returns:     BQLResponse: An object containing the query results, execution time, total hits, and debug info.</p> <p>Raises:     PTNADAPIError: If there's an error executing the query.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def execute_raw(self, query: str, source: str = \"2\") -&gt; BQLResponse:\n    \"\"\"\n    Execute a BQL query on a specific source and return the full response.\n\n    Args:\n        query (str): The BQL query to execute.\n        source (str): The identifier of the storage to query. Defaults to \"2\" (live).\n\n    Returns:\n        BQLResponse: An object containing the query results, execution time, total hits, and debug info.\n\n    Raises:\n        PTNADAPIError: If there's an error executing the query.\n\n    \"\"\"\n    try:\n        response = self._send_query(query, source)\n        return BQLResponse(\n            result=response[\"result\"],\n            took=response[\"took\"],\n            total=response[\"total\"],\n            debug=response.get(\"debug\")\n        )\n    except PTNADAPIError as e:\n        e.operation = \"execute BQL query\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to execute BQL query: {str(e)}\")\n</code></pre>"},{"location":"reference/api/bql/#ptnad.api.bql.BQLResponse","title":"ptnad.api.bql.BQLResponse","text":"<pre><code>BQLResponse(result: Any, took: int, total: int, debug: Dict[str, Any] | None = None)\n</code></pre> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def __init__(self, result: Any, took: int, total: int, debug: Dict[str, Any] | None = None) -&gt; None:\n    self.result = result\n    self.took = took\n    self.total = total\n    self.debug = debug\n</code></pre>"},{"location":"reference/api/monitoring/","title":"Monitoring","text":""},{"location":"reference/api/monitoring/#ptnad.api.monitoring.Status","title":"ptnad.api.monitoring.Status","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.TriggerType","title":"ptnad.api.monitoring.TriggerType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.Problem","title":"ptnad.api.monitoring.Problem","text":"<pre><code>Problem(status: str, template: str, vars: Dict[str, Any])\n</code></pre> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def __init__(self, status: str, template: str, vars: Dict[str, Any]) -&gt; None:\n    self.status = Status(status)\n    self.template = template\n    self.vars = vars\n    self.message = self.template.format(**self.vars)\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringStatus","title":"ptnad.api.monitoring.MonitoringStatus","text":"<pre><code>MonitoringStatus(status: str, problems: List[Dict[str, Any]])\n</code></pre> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def __init__(self, status: str, problems: List[Dict[str, Any]]) -&gt; None:\n    self._status = Status(status)\n    self.problems_raw = problems\n    self.problems = [Problem(**prob) for prob in problems]\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.Trigger","title":"ptnad.api.monitoring.Trigger","text":"<pre><code>Trigger(id: str, type: str, status: str, template: str, vars: Dict[str, Any], updated: str)\n</code></pre> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def __init__(self, id: str, type: str, status: str, template: str, vars: Dict[str, Any], updated: str) -&gt; None:\n    self.id = id\n    self.type = TriggerType(type)\n    self.status = Status(status)\n    self.template = template\n    self.vars = vars\n    self.updated = updated\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI","title":"ptnad.api.monitoring.MonitoringAPI","text":"<pre><code>MonitoringAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>get_active_triggers</code> <p>Get all active triggers (triggers with status other than 'green').</p> <code>get_status</code> <p>Get the current status.</p> <code>get_trigger_by_id</code> <p>Get a specific trigger by its ID.</p> <code>get_triggers</code> <p>Get the list of triggers.</p> <code>get_triggers_by_type</code> <p>Get all triggers of a specific type.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def __init__(self, client) -&gt; None:\n    self.client = client\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI.get_active_triggers","title":"get_active_triggers","text":"<pre><code>get_active_triggers() -&gt; List[Trigger]\n</code></pre> <p>Get all active triggers (triggers with status other than 'green').</p> <p>Returns:     List[Trigger]: A list of active Trigger objects.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_active_triggers(self) -&gt; List[Trigger]:\n    \"\"\"\n    Get all active triggers (triggers with status other than 'green').\n\n    Returns:\n        List[Trigger]: A list of active Trigger objects.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n\n    \"\"\"\n    triggers = self.get_triggers()\n    return [trigger for trigger in triggers if trigger.status != \"green\"]\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI.get_status","title":"get_status","text":"<pre><code>get_status() -&gt; MonitoringStatus\n</code></pre> <p>Get the current status.</p> <p>Returns:     MonitoringStatus: An object containing the current status and any problems.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the status.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_status(self) -&gt; MonitoringStatus:\n    \"\"\"\n    Get the current status.\n\n    Returns:\n        MonitoringStatus: An object containing the current status and any problems.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the status.\n\n    \"\"\"\n    try:\n        response = self.client.get(\"/monitoring/status\").json()\n        return MonitoringStatus(**response)\n    except PTNADAPIError as e:\n        e.operation = \"get monitoring status\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get monitoring status: {str(e)}\")\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI.get_trigger_by_id","title":"get_trigger_by_id","text":"<pre><code>get_trigger_by_id(trigger_id: str) -&gt; Trigger | None\n</code></pre> <p>Get a specific trigger by its ID.</p> <p>Args:     trigger_id (str): The ID of the trigger to retrieve.</p> <p>Returns:     Optional[Trigger]: The Trigger object if found, None otherwise.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the trigger.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_trigger_by_id(self, trigger_id: str) -&gt; Trigger | None:\n    \"\"\"\n    Get a specific trigger by its ID.\n\n    Args:\n        trigger_id (str): The ID of the trigger to retrieve.\n\n    Returns:\n        Optional[Trigger]: The Trigger object if found, None otherwise.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the trigger.\n\n    \"\"\"\n    triggers = self.get_triggers()\n    return next((trigger for trigger in triggers if trigger.id == trigger_id), None)\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI.get_triggers","title":"get_triggers","text":"<pre><code>get_triggers() -&gt; List[Trigger]\n</code></pre> <p>Get the list of triggers.</p> <p>Returns:     List[Trigger]: A list of Trigger objects.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_triggers(self) -&gt; List[Trigger]:\n    \"\"\"\n    Get the list of triggers.\n\n    Returns:\n        List[Trigger]: A list of Trigger objects.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n\n    \"\"\"\n    try:\n        response = self.client.get(\"/monitoring/triggers\").json()\n        return [Trigger(**trigger) for trigger in response.get(\"results\", [])]\n    except PTNADAPIError as e:\n        e.operation = \"get triggers\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get triggers: {str(e)}\")\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI.get_triggers_by_type","title":"get_triggers_by_type","text":"<pre><code>get_triggers_by_type(trigger_type: str) -&gt; List[Trigger]\n</code></pre> <p>Get all triggers of a specific type.</p> <p>Args:     trigger_type (str): The type of triggers to retrieve.</p> <p>Returns:     List[Trigger]: A list of Trigger objects of the specified type.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_triggers_by_type(self, trigger_type: str) -&gt; List[Trigger]:\n    \"\"\"\n    Get all triggers of a specific type.\n\n    Args:\n        trigger_type (str): The type of triggers to retrieve.\n\n    Returns:\n        List[Trigger]: A list of Trigger objects of the specified type.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n\n    \"\"\"\n    triggers = self.get_triggers()\n    return [trigger for trigger in triggers if trigger.type == trigger_type]\n</code></pre>"},{"location":"reference/api/replists/","title":"Replists","text":""},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI","title":"ptnad.api.replists.RepListsAPI","text":"<pre><code>RepListsAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>add_dynamic_list_item</code> <p>Add an item to a dynamic reputation list.</p> <code>bulk_add_items</code> <p>Add multiple items to a dynamic reputation list.</p> <code>bulk_delete_items</code> <p>Delete multiple items from a dynamic reputation list.</p> <code>create_list</code> <p>Create a new reputation list.</p> <code>delete_list</code> <p>Delete a reputation list.</p> <code>get_all_lists</code> <p>Get all reputation lists using pagination.</p> <code>get_dynamic_list_items</code> <p>Get items from a dynamic reputation list.</p> <code>get_list</code> <p>Get information about a specific reputation list.</p> <code>get_lists</code> <p>Get a list of reputation lists.</p> <code>get_stats</code> <p>Get statistics about reputation lists.</p> <code>remove_item</code> <p>Remove an item from a dynamic reputation list.</p> <code>update_list</code> <p>Update a reputation list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def __init__(self, client) -&gt; None:\n    self.client = client\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.add_dynamic_list_item","title":"add_dynamic_list_item","text":"<pre><code>add_dynamic_list_item(external_key: str, value: str, attributes: Dict[str, Any] | None = None) -&gt; Dict[str, Any]\n</code></pre> <p>Add an item to a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     value (str): Value to add to the list.     attributes (Optional[Dict[str, Any]]): Additional attributes for the item.</p> <p>Returns:     Dict[str, Any]: Information about the added item.</p> <p>Raises:     PTNADAPIError: If there's an error adding the item.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def add_dynamic_list_item(self, external_key: str, value: str, attributes: Dict[str, Any] | None = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add an item to a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        value (str): Value to add to the list.\n        attributes (Optional[Dict[str, Any]]): Additional attributes for the item.\n\n    Returns:\n        Dict[str, Any]: Information about the added item.\n\n    Raises:\n        PTNADAPIError: If there's an error adding the item.\n\n    \"\"\"\n    try:\n        response = self.client.post(f\"/replists/dynamic/{external_key}/{value}\", json=attributes or {})\n        if response.status_code in (200, 201):\n            return response.json()\n        raise PTNADAPIError(f\"Failed to add item to reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"add item to reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to add item to reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.bulk_add_items","title":"bulk_add_items","text":"<pre><code>bulk_add_items(external_key: str, items: List[Dict[str, Any]]) -&gt; None\n</code></pre> <p>Add multiple items to a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     items (List[Dict[str, Any]]): List of items to add, each item should have 'value' and optionally 'attrs'.</p> <p>Raises:     PTNADAPIError: If there's an error adding the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def bulk_add_items(self, external_key: str, items: List[Dict[str, Any]]) -&gt; None:\n    \"\"\"\n    Add multiple items to a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        items (List[Dict[str, Any]]): List of items to add, each item should have 'value' and optionally 'attrs'.\n\n    Raises:\n        PTNADAPIError: If there's an error adding the items.\n\n    \"\"\"\n    try:\n        self.client.post(f\"/replists/dynamic/{external_key}/_bulk\", json=items)\n    except PTNADAPIError as e:\n        e.operation = f\"bulk add items to reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to bulk add items to reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.bulk_delete_items","title":"bulk_delete_items","text":"<pre><code>bulk_delete_items(external_key: str, values: List[str]) -&gt; None\n</code></pre> <p>Delete multiple items from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     values (List[str]): List of values to delete from the list.</p> <p>Raises:     PTNADAPIError: If there's an error deleting the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def bulk_delete_items(self, external_key: str, values: List[str]) -&gt; None:\n    \"\"\"\n    Delete multiple items from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        values (List[str]): List of values to delete from the list.\n\n    Raises:\n        PTNADAPIError: If there's an error deleting the items.\n\n    \"\"\"\n    try:\n        response = self.client.post(f\"/replists/dynamic/{external_key}/_delete\", json=values)\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to bulk delete items from reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"bulk delete items from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to bulk delete items from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.create_list","title":"create_list","text":"<pre><code>create_list(name: str, type: str, color: str, description: str | None = None, content: Union[str, List[str], None] = None, external_key: str | None = None) -&gt; Dict[str, Any]\n</code></pre> <p>Create a new reputation list.</p> <p>Args:     name (str): Name of the reputation list. Must be a valid slug (letters, numbers, underscores, hyphens).     type (str): Type of the reputation list ('ip', 'dn', 'uri', or 'md5').     color (str): Color code for the reputation list ('0' to '7').     description (Optional[str]): Description of the reputation list.     content (Optional[Union[str, List[str]]]): Content of the reputation list. Can be a string or a list of strings that will be joined with newlines.     external_key (Optional[str]): External key for the reputation list.</p> <p>Returns:     Dict[str, Any]: Information about the created reputation list.</p> <p>Raises:     ValidationError: If the input parameters are invalid.     PTNADAPIError: If there's an error creating the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def create_list(self, name: str, type: str, color: str, description: str | None = None,\n                content: Union[str, List[str], None] = None, external_key: str | None = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new reputation list.\n\n    Args:\n        name (str): Name of the reputation list. Must be a valid slug (letters, numbers, underscores, hyphens).\n        type (str): Type of the reputation list ('ip', 'dn', 'uri', or 'md5').\n        color (str): Color code for the reputation list ('0' to '7').\n        description (Optional[str]): Description of the reputation list.\n        content (Optional[Union[str, List[str]]]): Content of the reputation list. Can be a string or a list of strings that will be joined with newlines.\n        external_key (Optional[str]): External key for the reputation list.\n\n    Returns:\n        Dict[str, Any]: Information about the created reputation list.\n\n    Raises:\n        ValidationError: If the input parameters are invalid.\n        PTNADAPIError: If there's an error creating the list.\n\n    \"\"\"\n    if not self._is_valid_slug(name):\n        raise ValidationError(\"Name must be a valid slug consisting of letters, numbers, underscores or hyphens.\")\n\n    data = {\n        \"name\": name,\n        \"type\": type,\n        \"color\": color,\n    }\n    if description:\n        data[\"description\"] = description\n    if content:\n        # Convert list of strings to newline-separated string if needed\n        if isinstance(content, list):\n            data[\"content\"] = \"\\n\".join(content)\n        else:\n            data[\"content\"] = content\n    if external_key:\n        data[\"external_key\"] = external_key\n\n    try:\n        response = self.client.post(\"/replists\", json=data)\n        if response.status_code == 201:\n            return response.json()\n        error_message = response.json() if response.headers.get(\"Content-Type\") == \"application/json\" else response.text\n        raise PTNADAPIError(f\"Failed to create reputation list. Status code: {response.status_code}. Error: {error_message}\")\n    except PTNADAPIError as e:\n        e.operation = \"create reputation list\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to create reputation list: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.delete_list","title":"delete_list","text":"<pre><code>delete_list(list_id: int) -&gt; None\n</code></pre> <p>Delete a reputation list.</p> <p>Args:     list_id (int): ID of the reputation list to delete.</p> <p>Raises:     PTNADAPIError: If there's an error deleting the reputation list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def delete_list(self, list_id: int) -&gt; None:\n    \"\"\"\n    Delete a reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list to delete.\n\n    Raises:\n        PTNADAPIError: If there's an error deleting the reputation list.\n\n    \"\"\"\n    try:\n        response = self.client.delete(f\"/replists/{list_id}\")\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to delete reputation list {list_id}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"delete reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to delete reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.get_all_lists","title":"get_all_lists","text":"<pre><code>get_all_lists(search: str | None = None, ordering: str | None = None, limit: int = 100) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get all reputation lists using pagination.</p> <p>Args:     search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.     ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix with '-' for descending order.     limit (int): Number of lists to fetch per request (default: 100).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing all reputation list information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the lists.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_all_lists(self, search: str | None = None, ordering: str | None = None,\n                  limit: int = 100) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get all reputation lists using pagination.\n\n    Args:\n        search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.\n        ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix with '-' for descending order.\n        limit (int): Number of lists to fetch per request (default: 100).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing all reputation list information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the lists.\n\n    \"\"\"\n    all_lists = []\n    offset = 0\n\n    while True:\n        response = self._get_lists_data(search, ordering, limit, offset)\n        lists = response[\"results\"]\n        all_lists.extend(lists)\n\n        if response[\"next\"] is None:\n            break\n\n        offset += limit\n\n    return all_lists\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.get_dynamic_list_items","title":"get_dynamic_list_items","text":"<pre><code>get_dynamic_list_items(external_key: str, ordering: str | None = None) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get items from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     ordering (Optional[str]): Field to sort the results by (value or modified).</p> <p>Returns:     List[Dict[str, Any]]: List of items in the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_dynamic_list_items(self, external_key: str, ordering: str | None = None) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get items from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        ordering (Optional[str]): Field to sort the results by (value or modified).\n\n    Returns:\n        List[Dict[str, Any]]: List of items in the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the items.\n\n    \"\"\"\n    params = {}\n    if ordering:\n        params[\"ordering\"] = ordering\n\n    try:\n        response = self.client.get(f\"/replists/dynamic/{external_key}\", params=params).json()\n        return response[\"results\"]\n    except PTNADAPIError as e:\n        e.operation = f\"get items from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get items from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.get_list","title":"get_list","text":"<pre><code>get_list(list_id: int) -&gt; Dict[str, Any]\n</code></pre> <p>Get information about a specific reputation list.</p> <p>Args:     list_id (int): ID of the reputation list.</p> <p>Returns:     Dict[str, Any]: Information about the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_list(self, list_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get information about a specific reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list.\n\n    Returns:\n        Dict[str, Any]: Information about the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the list.\n\n    \"\"\"\n    try:\n        response = self.client.get(f\"/replists/{list_id}\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"get reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.get_lists","title":"get_lists","text":"<pre><code>get_lists(search: str | None = None, ordering: str | None = None, limit: int = 100, offset: int = 0) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of reputation lists.</p> <p>Args:     search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.     ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix '-' for descending order.     limit (int): Maximum number of lists to return (default: 100).     offset (int): Number of lists to skip (default: 0).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing reputation list information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the lists.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_lists(self, search: str | None = None, ordering: str | None = None,\n              limit: int = 100, offset: int = 0) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of reputation lists.\n\n    Args:\n        search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.\n        ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix '-' for descending order.\n        limit (int): Maximum number of lists to return (default: 100).\n        offset (int): Number of lists to skip (default: 0).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing reputation list information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the lists.\n\n    \"\"\"\n    response = self._get_lists_data(search, ordering, limit, offset)\n    return response[\"results\"]\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.get_stats","title":"get_stats","text":"<pre><code>get_stats() -&gt; Dict[str, Any]\n</code></pre> <p>Get statistics about reputation lists.</p> <p>Returns:     Dict[str, Any]: Statistics about reputation lists.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the statistics.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_stats(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get statistics about reputation lists.\n\n    Returns:\n        Dict[str, Any]: Statistics about reputation lists.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the statistics.\n\n    \"\"\"\n    try:\n        response = self.client.get(\"/replists/stats\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = \"get reputation lists statistics\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get reputation lists statistics: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.remove_item","title":"remove_item","text":"<pre><code>remove_item(external_key: str, value: str) -&gt; None\n</code></pre> <p>Remove an item from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     value (str): Value to remove from the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error removing the item.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def remove_item(self, external_key: str, value: str) -&gt; None:\n    \"\"\"\n    Remove an item from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        value (str): Value to remove from the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error removing the item.\n\n    \"\"\"\n    try:\n        response = self.client.delete(f\"/replists/dynamic/{external_key}/{value}\")\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to remove item from reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"remove item from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to remove item from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.update_list","title":"update_list","text":"<pre><code>update_list(list_id: int, **kwargs) -&gt; Dict[str, Any]\n</code></pre> <p>Update a reputation list.</p> <p>Args:     list_id (int): ID of the reputation list to update.     **kwargs: Fields to update (color, name, type, description, content).</p> <p>Returns:     Dict[str, Any]: Updated information about the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error updating the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def update_list(self, list_id: int, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update a reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list to update.\n        **kwargs: Fields to update (color, name, type, description, content).\n\n    Returns:\n        Dict[str, Any]: Updated information about the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error updating the list.\n\n    \"\"\"\n    try:\n        response = self.client.patch(f\"/replists/{list_id}\", json=kwargs).json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"update reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to update reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/","title":"Signatures","text":""},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI","title":"ptnad.api.signatures.SignaturesAPI","text":"<pre><code>SignaturesAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>apply_changes</code> <p>Apply changes made to Rules and commit them to sensors.</p> <code>get_classes</code> <p>Get a list of signature classes.</p> <code>get_rule</code> <p>Get information about a specific Rule.</p> <code>get_rules</code> <p>Get a list of Rules.</p> <code>get_stats</code> <p>Get statistics about Rules.</p> <code>revert_changes</code> <p>Revert changes made to Rules.</p> <code>update_rule</code> <p>Update a Rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def __init__(self, client) -&gt; None:\n    self.client = client\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.apply_changes","title":"apply_changes","text":"<pre><code>apply_changes() -&gt; Dict[str, str]\n</code></pre> <p>Apply changes made to Rules and commit them to sensors.</p> <p>Returns:     Dict[str, str]: A dictionary with the hashsum of the package.</p> <p>Raises:     PTNADAPIError: If there's an error applying the changes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def apply_changes(self) -&gt; Dict[str, str]:\n    \"\"\"\n    Apply changes made to Rules and commit them to sensors.\n\n    Returns:\n        Dict[str, str]: A dictionary with the hashsum of the package.\n\n    Raises:\n        PTNADAPIError: If there's an error applying the changes.\n\n    \"\"\"\n    try:\n        response = self.client.post(\"/signatures/commit\").json()\n        if \"hashsum\" in response:\n            return response\n        if \"fatal_error\" in response or \"other_errors\" in response:\n            errors = []\n            if response.get(\"fatal_error\"):\n                errors.append(response[\"fatal_error\"])\n            if response.get(\"other_errors\"):\n                errors.extend(response[\"other_errors\"])\n            raise PTNADAPIError(f\"Failed to commit signature changes: {', '.join(errors)}\")\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"commit signature changes: {', '.join(errors)}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to apply Rule changes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.get_classes","title":"get_classes","text":"<pre><code>get_classes(search: str | None = None, ordering: str | None = None, **filters) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of signature classes.</p> <p>Args:     search (Optional[str]): Keyword to filter the classes.     ordering (Optional[str]): Field to sort the results by.     **filters: Additional filters (name, title, priority).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing signature class information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the classes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_classes(self, search: str | None = None, ordering: str | None = None, **filters) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of signature classes.\n\n    Args:\n        search (Optional[str]): Keyword to filter the classes.\n        ordering (Optional[str]): Field to sort the results by.\n        **filters: Additional filters (name, title, priority).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing signature class information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the classes.\n\n    \"\"\"\n    params = {k: v for k, v in filters.items() if v is not None}\n    if search:\n        params[\"search\"] = search\n    if ordering:\n        params[\"ordering\"] = ordering\n\n    try:\n        response = self.client.get(\"/signatures/classes\", params=params).json()\n        return response[\"results\"]\n    except PTNADAPIError as e:\n        e.operation = \"get signature classes\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get signature classes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.get_rule","title":"get_rule","text":"<pre><code>get_rule(rule_id: int) -&gt; Dict[str, Any]\n</code></pre> <p>Get information about a specific Rule.</p> <p>Args:     rule_id (int): sid of the Rule.</p> <p>Returns:     Dict[str, Any]: Information about the Rule.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_rule(self, rule_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get information about a specific Rule.\n\n    Args:\n        rule_id (int): sid of the Rule.\n\n    Returns:\n        Dict[str, Any]: Information about the Rule.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the rule.\n\n    \"\"\"\n    try:\n        response = self.client.get(f\"/signatures/rules/{rule_id}\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"get Rule {rule_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get rule {rule_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.get_rules","title":"get_rules","text":"<pre><code>get_rules(search: str | None = None, ordering: str | None = None, limit: int = 100, offset: int = 0, **filters) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of Rules.</p> <p>Args:     search (Optional[str]): Keyword to filter the rules.     ordering (Optional[str]): Field to sort the results by.     limit (int): Maximum number of rules to return (default: 100).     offset (int): Number of rules to skip (default: 0).     *filters: Additional filters. Available filters:         sid: Filter by sid (can be a single value or a list)         sid__gte: sid greater than or equal to         sid__lt: sid less than         vendor: Filter by vendor name (can be a single value or a list)         enabled: Filter by enabled status (true or false)         has_redef: Filter by has_redef status (true or false)         has_exceptions: Filter by has_exceptions status (true or false)         priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)         cls: Filter by class name (can be a single value or a list)         diff: Filter by rule changes, valid values (can be a list): added (+), updated (), removed (-), unchanged (=). Available in 12.2+         has_error: Filter by has_error status (true or false)         client: Search for IP address in src_adr and dst_adr         server: Search for IP address in src_adr and dst_adr</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing Rule information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the rules.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_rules(self, search: str | None = None, ordering: str | None = None,\n              limit: int = 100, offset: int = 0, **filters) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of Rules.\n\n    Args:\n        search (Optional[str]): Keyword to filter the rules.\n        ordering (Optional[str]): Field to sort the results by.\n        limit (int): Maximum number of rules to return (default: 100).\n        offset (int): Number of rules to skip (default: 0).\n        **filters: Additional filters. Available filters:\n            sid: Filter by sid (can be a single value or a list)\n            sid__gte: sid greater than or equal to\n            sid__lt: sid less than\n            vendor: Filter by vendor name (can be a single value or a list)\n            enabled: Filter by enabled status (true or false)\n            has_redef: Filter by has_redef status (true or false)\n            has_exceptions: Filter by has_exceptions status (true or false)\n            priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)\n            cls: Filter by class name (can be a single value or a list)\n            diff: Filter by rule changes, valid values (can be a list): added (+), updated (*), removed (-), unchanged (=). Available in 12.2+\n            has_error: Filter by has_error status (true or false)\n            client: Search for IP address in src_adr and dst_adr\n            server: Search for IP address in src_adr and dst_adr\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing Rule information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the rules.\n\n    \"\"\"\n    response = self._get_rules_data(search, ordering, limit, offset, **filters)\n    return response[\"results\"]\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.get_stats","title":"get_stats","text":"<pre><code>get_stats() -&gt; Dict[str, Any]\n</code></pre> <p>Get statistics about Rules.</p> <p>Returns:     Dict[str, Any]: Statistics about Rules.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the statistics.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_stats(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get statistics about Rules.\n\n    Returns:\n        Dict[str, Any]: Statistics about Rules.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the statistics.\n\n    \"\"\"\n    try:\n        response = self.client.get(\"/signatures/stats\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = \"get Rules statistics\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get Rules statistics: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.revert_changes","title":"revert_changes","text":"<pre><code>revert_changes() -&gt; None\n</code></pre> <p>Revert changes made to Rules.</p> <p>Raises:     PTNADAPIError: If there's an error reverting the changes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def revert_changes(self) -&gt; None:\n    \"\"\"\n    Revert changes made to Rules.\n\n    Raises:\n        PTNADAPIError: If there's an error reverting the changes.\n\n    \"\"\"\n    try:\n        self.client.post(\"/signatures/rollback\")\n    except PTNADAPIError as e:\n        e.operation = \"revert Rule changes\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to revert Rule changes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.update_rule","title":"update_rule","text":"<pre><code>update_rule(rule_id: int, **kwargs) -&gt; Dict[str, Any]\n</code></pre> <p>Update a Rule.</p> <p>Args:     rule_id (int): ID of the Rule to update.     **kwargs: Fields to update (enabled, action, msg, etc.).</p> <p>Returns:     Dict[str, Any]: Updated information about the Rule.</p> <p>Raises:     PTNADAPIError: If there's an error updating the rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def update_rule(self, rule_id: int, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update a Rule.\n\n    Args:\n        rule_id (int): ID of the Rule to update.\n        **kwargs: Fields to update (enabled, action, msg, etc.).\n\n    Returns:\n        Dict[str, Any]: Updated information about the Rule.\n\n    Raises:\n        PTNADAPIError: If there's an error updating the rule.\n\n    \"\"\"\n    try:\n        response = self.client.patch(f\"/signatures/rules/{rule_id}\", json=kwargs).json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"update Rule {rule_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to update Rule {rule_id}: {str(e)}\")\n</code></pre>"},{"location":"ru/#pt-nad-client","title":"PT NAD Client","text":"<p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f: https://security-experts-community.github.io/ptnad-client/</p> <p>\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434: https://github.com/Security-Experts-Community/ptnad-client</p> <p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430 Python \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 API PT NAD.</p>"},{"location":"ru/#_1","title":"\ud83d\ude80 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<pre><code>pip install ptnad-client\n</code></pre>"},{"location":"ru/#_2","title":"\ud83d\udcd6 \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code>from ptnad import PTNADClient\n\nclient = PTNADClient(\"https://1.3.3.7\", verify_ssl=False)\nclient.set_auth(username=\"user\", password=\"pass\")\n# client.set_auth(auth_type=\"sso\", username=\"user\", password=\"pass\", client_id=\"ptnad\", client_secret=\"11111111-abcd-asdf-12334-0123456789ab\", sso_url=\"https://siem.example.local:3334\")\nclient.login()\n\nquery = \"SELECT src.ip, dst.ip, proto FROM flow WHERE end &gt; 2025.02.25 and end &lt; 2025.02.26 LIMIT 10\"\nresult = client.bql.execute(query)\nprint(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: {result}\")\n</code></pre>"},{"location":"ru/#_3","title":"\ud83d\udccb \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432","text":"<p>\u0412\u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0432\u043e\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445:</p> <pre><code># HTTP \u043d\u0435 \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 80 (\u0432\u043d\u0435\u0448\u043d\u0438\u0439)\n\"app_proto == 'http' &amp;&amp; dst.port != 80 &amp;&amp; dst.groups != 'HOME_NET'\"\n\n# TLS \u043d\u0435 \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 443 (\u0432\u043d\u0435\u0448\u043d\u0438\u0439)\n\"app_proto == 'tls' &amp;&amp; dst.port != 443 &amp;&amp; dst.groups != 'HOME_NET'\"\n\n# \u041f\u043e\u0440\u0442 53 \u043d\u0435 \u043f\u043e DNS\n\"dst.port == 53 &amp;&amp; app_proto != 'dns' &amp;&amp; (flags == 'FINISHED' &amp;&amp; !(flags == 'MISSED_START' || flags == 'MISSED_END')) &amp;&amp; pkts.recv &gt; 0\"\n\n# \u0421\u0435\u0441\u0441\u0438\u0438 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438\n\"files\"\n\n# \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0444\u0430\u0439\u043b\u0430\n\"files.filename ~ '*amd64.deb'\"\n\n# Bittorrent \u0438\u0437 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0441\u0435\u0442\u0438\n\"app_proto == bittorrent and src.groups == 'HOME_NET'\"\n\n# \u041f\u043e\u0447\u0442\u0430 \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u0443\u044e (\u0432\u043d\u0435\u0448\u043d\u044f\u044f)\n\"(app_proto == 'smtp' || app_proto == 'pop3' || app_proto == 'imap') &amp;&amp; !(smtp.rqs.cmd.name == 'STARTTLS' || pop3.rqs.cmd.name == 'STLS' || imap.rqs.cmd.name == 'STARTTLS') &amp;&amp; dst.groups != 'HOME_NET'\"\n\n# \u041d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043f\u043e\u0440\u0442\u044b\n\"src.groups != 'HOME_NET' &amp;&amp; dst.port != 80 &amp;&amp; dst.port != 443 &amp;&amp; dst.port != 25 &amp;&amp; src.port != 53 &amp;&amp; src.port != 443 &amp;&amp; src.port != 123 &amp;&amp; (flags == 'FINISHED' &amp;&amp; !(flags == 'MISSED_START' || flags == 'MISSED_END')) &amp;&amp; pkts.recv &gt; 0\"\n\n# Digital Ocean \u0438 Amazon\n\"dst.geo.org == 'DigitalOcean, LLC' || dst.geo.org == 'Amazon.com, Inc.'\"\n\n# POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 \u043e\u0442\u0432\u0435\u0442\u043e\u043c 200\n\"http(rqs.method==POST &amp;&amp; rsp.code==200)\"\n\n# \u0421\u0440\u0430\u0431\u043e\u0442\u043a\u0438 MultiScanner\n\"rpt.type == 'ms'\"\n\n# \u041c\u0430\u0439\u043d\u0435\u0440\u044b\n\"rpt.cat == 'miners'\"\n</code></pre> <p>\u0421 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0442\u0443\u0442 - usage_examples</p>"},{"location":"ru/#_4","title":"\u2705 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":"<p>\ud83d\udd10 \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f - \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f - IAM (SSO) \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f  </p> <p>\ud83d\udcca BQL-\u0437\u0430\u043f\u0440\u043e\u0441\u044b - \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432  </p> <p>\ud83d\udce1 \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u0430\u043c\u0438  </p> <p>\ud83d\udee1\ufe0f \u0421\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b (\u0432\u0441\u0435\u0445/\u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445) - \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u043e\u0442\u043a\u0430\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439  </p> <p>\ud83d\udccb \u0420\u0435\u043f\u043b\u0438\u0441\u0442\u044b - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435/\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0438 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u043f\u043b\u0438\u0441\u0442\u043e\u0432 - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0440\u0435\u043f\u043b\u0438\u0441\u0442\u0430\u0445  </p>"},{"location":"ru/#_5","title":"\ud83d\udee0\ufe0f \u041f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","text":"<ul> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 </li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438  </li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0445\u043e\u0441\u0442\u0430\u043c\u0438  </li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0443\u043f\u043f\u0430\u043c\u0438  </li> </ul>"},{"location":"ru/#_6","title":"\ud83e\uddd1\u200d\ud83d\udcbb \u0412\u043a\u043b\u0430\u0434 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442","text":"<p>\u0425\u043e\u0442\u0438\u0442\u0435 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434? \u041e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u0433\u0430\u0439\u0434\u043e\u043c:</p> <ul> <li>\ud83d\udcc4 \u0413\u0430\u0439\u0434 \u0434\u043b\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432</li> </ul> <p>\u041c\u044b \u043e\u0442\u043a\u0440\u044b\u0442\u044b \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0438\u0434\u0435\u0439, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0439!</p> <p></p> <p>PT NAD Client \u2014 \u0447\u0430\u0441\u0442\u044c \u044d\u043a\u043e\u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 SDK, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\u043c\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438. \u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438:</p> <p>\ud83d\udd39py-ptsandbox \u2014 Python-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API PT Sandbox</p> <p>\ud83d\udd39sandbox-cli \u2014 CLI-\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 PT Sandbox</p>"},{"location":"ru/CONTRIBUTING/","title":"\ud83e\udd1d \u041f\u043e\u043c\u043e\u0449\u044c \u0432 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0443! \u0412\u043e\u0442 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0432\u043d\u0435\u0441\u0442\u0438 \u0432\u043a\u043b\u0430\u0434:</p>"},{"location":"ru/CONTRIBUTING/#_2","title":"\ud83d\ude80 \u041a\u0430\u043a \u043d\u0430\u0447\u0430\u0442\u044c","text":"<ol> <li>\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0444\u043e\u0440\u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f</li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443: <pre><code>git checkout -b feature/\u0432\u0430\u0448\u0430_\u0444\u0438\u0447\u0430\n</code></pre></li> <li>\u0412\u043d\u0435\u0441\u0438\u0442\u0435 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f</li> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043e\u0434</li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Pull Request \u043d\u0430 <code>main</code> \u0438\u043b\u0438 <code>dev</code> (\u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438)</li> </ol>"},{"location":"ru/CONTRIBUTING/#_3","title":"\u2705 \u0427\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f","text":"<ul> <li>\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438</li> <li>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445</li> <li>\u041d\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438 (\u0432 \u0438\u0434\u0435\u0430\u043b\u0435 - \u0441 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435\u043c)</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> </ul>"},{"location":"ru/CONTRIBUTING/#_4","title":"\ud83e\uddf9 \u0421\u0442\u0438\u043b\u044c \u043a\u043e\u0434\u0430","text":"<ul> <li>\u0421\u043e\u0431\u043b\u044e\u0434\u0430\u0439\u0442\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0441\u0442\u0438\u043b\u044c (eslint/black/prettier)</li> <li>\u0421\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b: <pre><code>feature: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 X \nfix: \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 Y \ndocs: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f\n</code></pre></li> </ul>"},{"location":"ru/CONTRIBUTING/#_5","title":"\ud83c\udf10 \u0425\u043e\u0447\u0443 \u043f\u043e\u043c\u043e\u0447\u044c \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c","text":"<p>\u041c\u044b \u0441\u0442\u0440\u0435\u043c\u0438\u043c\u0441\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c \u0434\u043b\u044f \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043b\u044e\u0434\u0435\u0439. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043c\u043e\u0447\u044c \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u044f\u0437\u044b\u043a \u2014 \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f!</p> <p>\ud83d\udcc4 \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b: - en English (default) - \ud83c\uddf7\ud83c\uddfa \u0420\u0443\u0441\u0441\u043a\u0438\u0439 - \ud83c\udf10 \u0412\u0430\u0448 \u044f\u0437\u044b\u043a? \u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u043d\u0430\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c!</p> <p>\u0427\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0430\u0442\u044c, \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 issue \u0438 \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435 \u043d\u0430\u043c.</p>"},{"location":"ru/CONTRIBUTING/#_6","title":"\ud83d\udee0 \u041f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430\u043c\u0438","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0432 <code>package.json</code>/<code>requirements.txt</code>/<code>pyproject.toml</code></li> <li>\u0421\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0441\u0442\u0438\u043b\u044e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u0440\u0438\u043d\u044f\u0442\u043e\u043c\u0443 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0435\u0440\u0435\u0437 <code>eslint</code>, <code>black</code>, <code>prettier</code>, etc.)</li> <li>\u041f\u0438\u0448\u0438\u0442\u0435 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0438 \u0441\u0430\u043c\u043e\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u043a\u043e\u0434</li> <li>\u0421\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0432\u043d\u043e\u0441\u0438\u043c\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438</li> <li>\u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c issue \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0443\u0436\u0435 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438</li> <li>\u0414\u0435\u043b\u0430\u0439\u0442\u0435 feature-\u0432\u0435\u0442\u043a\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 pull request \u0441 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c</li> </ul>"},{"location":"ru/CONTRIBUTING/#developer-certificate-of-origin-dco","title":"\u270d\ufe0f Developer Certificate of Origin (DCO)","text":"<p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0432\u0430\u0448 \u0432\u043a\u043b\u0430\u0434! \u0427\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u0447\u0438\u0441\u0442\u043e\u0442\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Developer Certificate of Origin (DCO).</p>"},{"location":"ru/DCO/","title":"\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043e\u0431 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430 (DCO)","text":""},{"location":"ru/DCO/#dco_1","title":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 DCO \u0438 \u0437\u0430\u0447\u0435\u043c \u043e\u043d \u043d\u0443\u0436\u0435\u043d?","text":"<p>Developer Certificate of Origin (DCO) \u2013 \u044d\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u0432\u043e \u043c\u043d\u043e\u0433\u0438\u0445 open-source \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0439 \u0441 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c\u0438. </p> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0432 \u043a\u043e\u043c\u043c\u0438\u0442 (sign-off), \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442 \u0441\u0432\u043e\u0451 \u0430\u0432\u0442\u043e\u0440\u0441\u0442\u0432\u043e \u0438\u043b\u0438 \u0437\u0430\u043a\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0438 \u0434\u0430\u0451\u0442 \u043f\u0440\u0430\u0432\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0442\u044c \u044d\u0442\u043e\u0442 \u0432\u043a\u043b\u0430\u0434 \u043d\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u200b. </p> <p>\u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 Contributor License Agreement (CLA), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0444\u043e\u0440\u043c\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442, DCO \u2014 \u044d\u0442\u043e \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435, \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0435 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u043a\u043b\u0430\u0434 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u043e\u0431 \u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0438 \u0438 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438, \u0430 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430 \u043b\u0435\u0433\u0438\u0442\u0438\u043c\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430 \u0434\u0435\u043a\u043b\u0430\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u0430\u043c \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u043e\u0440, \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442.</p> <p>\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 DCO: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0432\u043e\u0451 \u0441\u043e\u0433\u043b\u0430\u0441\u0438\u0435 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438 DCO, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u201cSigned-off-by\u201d \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430. \u042d\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. </p> <p><pre><code>\u26a0\ufe0f \u201c\u041f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0438\u0442\u201d \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 DCO \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0443\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u044c, \u0430 \u043d\u0435 \u0446\u0438\u0444\u0440\u043e\u0432\u0443\u044e  \u043f\u043e\u0434\u043f\u0438\u0441\u044c GPG\u200b.\n</code></pre> \u041c\u043d\u043e\u0433\u0438\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u044f\u0434\u0440\u043e Linux, Docker, GitLab \u0438 \u0434\u0440.) \u0442\u0440\u0435\u0431\u0443\u044e\u0442 DCO-\u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u043e\u0442 \u0432\u0441\u0435\u0445 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u043e\u0440\u043e\u0432 \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u042d\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u0432 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u0442\u043e\u0433\u043e, \u043a\u0442\u043e \u0432\u043d\u0435\u0441 \u043a\u043e\u0434 \u0438 \u0438\u043c\u0435\u0435\u0442 \u043b\u0438 \u043e\u043d \u043f\u0440\u0430\u0432\u043e \u0435\u0433\u043e \u0432\u043d\u043e\u0441\u0438\u0442\u044c.\u200b</p>"},{"location":"ru/DCO/#dco-11","title":"\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 DCO \u0432\u0435\u0440\u0441\u0438\u0438 1.1","text":"<p>\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a: developercertificate.org</p> <p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u043f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 Developer Certificate of Origin \u0432\u0435\u0440\u0441\u0438\u0438 1.1, \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a.</p> <pre><code>\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 (Developer Certificate of Origin)\n\u0412\u0435\u0440\u0441\u0438\u044f 1.1\n\n\u0410\u0432\u0442\u043e\u0440\u0441\u043a\u0438\u0435 \u043f\u0440\u0430\u0432\u0430 (C) 2004, 2006 \u0424\u043e\u043d\u0434 Linux \u0438 \u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438.\n\n\u041a\u0430\u0436\u0434\u043e\u043c\u0443 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0442\u044c \u0434\u043e\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043f\u0438\u0438 \u044d\u0442\u043e\u0433\u043e\n\u043b\u0438\u0446\u0435\u043d\u0437\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u043d\u043e \u0435\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f.\n\n\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0432\u0435\u0440\u0441\u0438\u0438 1.1\n\n\u0412\u043d\u043e\u0441\u044f \u0432\u043a\u043b\u0430\u0434 \u0432 \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442, \u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044e, \u0447\u0442\u043e:\n\n(a) \u0412\u043a\u043b\u0430\u0434 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u043b\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u043c\u043d\u043e\u0439, \u0438 \u0443 \u043c\u0435\u043d\u044f \u0435\u0441\u0442\u044c \u043f\u0440\u0430\u0432\u043e\n\u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0432 \u0444\u0430\u0439\u043b\u0435 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c; \u0438\u043b\u0438\n\n(b) \u0412\u043a\u043b\u0430\u0434 \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u0430\u044f, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e,\n\u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0435\u0439 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c, \u0438 \u0443 \u043c\u0435\u043d\u044f\n\u0435\u0441\u0442\u044c \u043f\u0440\u0430\u0432\u043e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u044d\u0442\u043e\u0439 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0435\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441\n\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u043b\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u043c\u043d\u043e\u0439, \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0442\u043e\u0439 \u0436\u0435\n\u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c (\u0435\u0441\u043b\u0438 \u043c\u043d\u0435 \u043d\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0435\n\u043f\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438), \u043a\u0430\u043a \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0444\u0430\u0439\u043b\u0435; \u0438\u043b\u0438\n\n(c) \u0412\u043a\u043b\u0430\u0434 \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043c\u043d\u0435 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0434\u0440\u0443\u0433\u0438\u043c \u043b\u0438\u0446\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u043b\u043e\n\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0443\u043d\u043a\u0442\u0430\u043c (a), (b) \u0438\u043b\u0438 (c), \u0438 \u044f \u043d\u0435 \u0432\u043d\u043e\u0441\u0438\u043b \u0432 \u043d\u0435\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439.\n\n(d) \u042f \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u0438 \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u044e\u0441\u044c \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u043c\u043e\u0439 \u0432\u043a\u043b\u0430\u0434 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f\n\u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c\u0438, \u0438 \u0447\u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0432\u043a\u043b\u0430\u0434\u0435 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0432\u0441\u044e \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e,\n\u043a\u043e\u0442\u043e\u0440\u0443\u044e \u044f \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043d\u0438\u043c, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043c\u043e\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u044c) \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f\n\u0431\u0435\u0441\u0441\u0440\u043e\u0447\u043d\u043e \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438\n\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u043b\u0438 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f\u043c\u0438 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c, \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u044b\u043c\u0438 \u043a \u043d\u0435\u043c\u0443.\n</code></pre> <p>\u041f\u0440\u043e\u0435\u043a\u0442, \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0439 DCO, \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u0441\u0435 \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u043e\u0440\u044b \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u044e\u0442\u0441\u044f \u0441 \u044d\u0442\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043c. \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0441\u0442\u0440\u043e\u0447\u043a\u0443 \u201cSigned-off-by\u201d \u0432 \u043a\u043e\u043c\u043c\u0438\u0442, \u0432\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442\u0435, \u0447\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 DCO, \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u043a\u043b\u0430\u0434\u0430.</p>"},{"location":"ru/DCO/#dco-sign-off","title":"\u041a\u0430\u043a \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0438\u0442\u044b (DCO Sign-off)","text":"<p>\u0427\u0442\u043e\u0431\u044b \u201c\u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u201d \u0441\u0432\u043e\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 DCO, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0432\u0438\u0434\u0430:</p> <pre><code>Signed-off-by: \u0418\u043c\u044f \u0424\u0430\u043c\u0438\u043b\u0438\u044f &lt;youremail@example.com&gt;\n</code></pre> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u044d\u0442\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043f\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0438\u0442\u0430. \u041e\u0434\u043d\u0430\u043a\u043e Git \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e \u0437\u0430 \u0432\u0430\u0441. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043e\u043f\u0446\u0438\u044e -s \u0438\u043b\u0438 --signoff \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>git commit -s -m \"\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u043d\u043e\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e X\"\n</code></pre> <pre><code>git commit -signoff -m \"\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u0431\u0430\u0433 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 Y\"\n</code></pre> <p>\u042d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u201cSigned-off-by\u201d \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0438\u043c\u044f \u0438 email \u0438\u0437 \u0432\u0430\u0448\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 Git\u200b.</p> <p>\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u043e \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b user.name \u0438 user.email \u0432 Git. \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u0447\u0442\u043e git config user.name \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0430\u0448\u0435 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0438\u043c\u044f, \u0430 git config user.email \u2013 \u0432\u0430\u0448 email. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u0445 (\u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432) \u043c\u043e\u0436\u043d\u043e \u0442\u0430\u043a:</p> <pre><code>git config --global user.name \"\u0418\u043c\u044f \u0424\u0430\u043c\u0438\u043b\u0438\u044f\"\ngit config --global user.email \"youremail@example.com\"\n</code></pre> <p>\u042d\u0442\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442, \u043a\u0430\u043a \u0432\u044b \u0431\u0443\u0434\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u0435 (\u0430\u0432\u0442\u043e\u0440 \u043a\u043e\u043c\u043c\u0438\u0442\u0430) \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0438\u200b.</p> <p>\u0418\u043c\u044f \u0438 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u201cSigned-off-by\u201d \u0434\u043e\u043b\u0436\u043d\u044b \u0442\u043e\u0447\u043d\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0438 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u043c \u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0430\u0432\u0442\u043e\u0440\u0430 \u043a\u043e\u043c\u043c\u0438\u0442\u0430, \u0438\u043d\u0430\u0447\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 DCO \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0437\u0430\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u044c\u200b.</p> <pre><code>\u26a0\ufe0f \u041c\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u043e\u0442 \u0432\u0430\u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u043c\u044f, \u0430 \u043d\u0435 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\n</code></pre> <p>\u041a\u043e\u0433\u0434\u0430 Git \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u0442\u0430\u0432\u0438\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0447\u0435\u0440\u0435\u0437 -s, \u043e\u043d \u0431\u0435\u0440\u0451\u0442 \u0438\u043c\u0435\u043d\u043d\u043e \u044d\u0442\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e email \u0442\u043e\u0442 \u0436\u0435 \u0441\u0430\u043c\u044b\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443 GitHub, \u0438\u043d\u0430\u0447\u0435 \u0431\u043e\u0442 DCO \u0443\u043a\u0430\u0436\u0435\u0442 \u043d\u0430 \u043d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0430\u0432\u0442\u043e\u0440\u0443.</p> <pre><code>\u26a0\ufe0f \u0412\u0430\u0436\u043d\u043e \u043d\u0435 \u043f\u0443\u0442\u0430\u0442\u044c DCO-sign-off \u0441 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u044c\u044e \u043a\u043e\u043c\u043c\u0438\u0442\u0430. DCO \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u0430\u044f \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0446\u0438\u044f \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438, \u0430 \u043d\u0435 \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430. \u0424\u043b\u0430\u0433 -s \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0435\u043a\u0441\u0442 \u201cSigned-off-by\u201d, \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044f \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0412 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a \u0444\u043b\u0430\u0433 -S \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u043a \u043a\u043e\u043c\u043c\u0438\u0442\u0443 \u0446\u0438\u0444\u0440\u043e\u0432\u0443\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u044c GPG \u0434\u043b\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438. DCO \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u200b.\n\n\u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 git commit -S \u0432\u043c\u0435\u0441\u0442\u043e -s, \u0443\u0447\u0442\u0438\u0442\u0435, \u0447\u0442\u043e \u0434\u043b\u044f DCO \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u0430. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435, \u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0430 \u0444\u043b\u0430\u0433\u0430 \u0432\u043c\u0435\u0441\u0442\u0435 (git commit -S -s), \u0447\u0442\u043e\u0431\u044b \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0438\u0442 \u0446\u0438\u0444\u0440\u043e\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u044c\u044e, \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c DCO-\u043f\u043e\u0434\u043f\u0438\u0441\u044c. \u041d\u043e \u0434\u043b\u044f \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f DCO \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e -s.\n</code></pre>"},{"location":"ru/DCO/#dco_2","title":"\u0422\u0438\u043f\u043e\u0432\u044b\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u044c DCO","text":"<p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435\u043c \u201cSigned-off-by\u201d \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0438\u0445 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f:</p>"},{"location":"ru/DCO/#dco_3","title":"\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0431\u0435\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 DCO","text":"<p>\u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044f: \u0412\u044b \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u0432 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u043c \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438, \u043d\u043e \u0437\u0430\u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u201cSigned-off-by\u201d \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u042d\u0442\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0435\u0449\u0451 \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Pull Request \u0435\u0449\u0451 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u043d).</p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u2013 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 amend, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u044c, \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430.</p> <pre><code>git commit --amend --signoff\n</code></pre> <p>\u0438\u043b\u0438</p> <pre><code>git commit --amend -s\n</code></pre> <p>\u042d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043e\u0442\u043a\u0440\u043e\u0435\u0442 \u0432\u0430\u0448 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0434\u043b\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (\u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430, \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441 \u0444\u043b\u0430\u0433\u043e\u043c --no-edit), \u0438 \u0432\u043a\u043b\u044e\u0447\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u201cSigned-off-by\u201d \u0441 \u0432\u0430\u0448\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0438 email\u200b. </p> <p>\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 (\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u0434\u0435) \u043d\u0435 \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f DCO-\u043f\u043e\u0434\u043f\u0438\u0441\u044c.</p> <p>\u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c - \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0438\u0436\u0435 \u043f\u0440\u043e \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 rebase. \u041d\u043e \u0435\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u043b\u0438\u0448\u044c \u0441 \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u043c, \u044d\u0442\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e. </p> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430\u0441\u044c \u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044c: \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 git log -1 \u0438 \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u201cSigned-off-by: \u2026\u201d.</p>"},{"location":"ru/DCO/#github","title":"\u041a\u043e\u043c\u043c\u0438\u0442 \u0443\u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u043d\u0430 GitHub \u0431\u0435\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0438","text":"<p>\u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044f: \u0412\u044b \u0443\u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0438\u0442(\u044b) \u043d\u0430 \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0442\u043a\u0440\u044b\u043b\u0438 Pull Request), \u0438 \u0431\u043e\u0442 DCO \u0441\u043e\u043e\u0431\u0449\u0438\u043b\u0430 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u043d\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u044c\u044e.</p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u041d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0432 \u043d\u0438\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u044c, \u0438 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u0443\u044e \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u043d\u0430 GitHub. \u0414\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430, \u043a\u0430\u043a \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f amend:</p> <pre><code>git commit --amend --signoff\ngit push --force origin &lt;\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435_\u0432\u0435\u0442\u043a\u0438&gt;\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e Pull Request \u043d\u0430 GitHub \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0441\u044f, \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 DCO \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u043e\u0439\u0442\u0438, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u044c. </p> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0431\u044b\u043b\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u043d\u0435 \u0432 \u0441\u0430\u043c\u043e\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u0435, \u0430 \u0432 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0432 \u0432\u0435\u0442\u043a\u0435, \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e:</p> <ul> <li>\u041c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 rebase (\u0441\u043c. \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439) \u0438 \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0442\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430.</li> <li>\u041b\u0438\u0431\u043e, \u0435\u0441\u043b\u0438 \u0437\u0430\u0431\u044b\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0432 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u0441\u0442\u0430\u0440\u043e\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u0435 - \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 rebase \u0434\u043e \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435 --signoff. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, git rebase --signoff SHA^ (\u0433\u0434\u0435 SHA \u2013 \u0445\u0435\u0448 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0431\u0435\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0438) \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0451\u0442 \u0432\u0441\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043d\u0435\u0433\u043e, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438.</li> </ul> <p>\u0412 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0441\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u0442\u043e\u043c\u0443, \u0447\u0442\u043e\u0431\u044b \u0435\u0433\u043e \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u0443\u044e \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432.</p>"},{"location":"ru/DCO/#_1","title":"\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u0431\u0435\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0435\u0439","text":"<p>\u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044f: \u0412\u0430\u0448 Pull Request \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432, \u0438 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0438\u0437 \u043d\u0438\u0445 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0430 \u201cSigned-off-by\u201d. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 DCO \u043d\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442. \u041d\u0443\u0436\u043d\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u0442\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u044b, \u043d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0432 \u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. </p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 rebase \u0432 Git, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043a\u043e\u043c\u043c\u0438\u0442\u0443. \u042d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u043b\u0438 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0447\u0435\u0440\u0435\u0437 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c:</p>"},{"location":"ru/DCO/#_2","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0435\u0439:","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043e\u043f\u0446\u0438\u0435\u0439 --signoff \u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u044b rebase. \u041e\u043d\u0430 \u0441\u0430\u043c\u0430 \u0434\u043e\u043f\u0438\u0448\u0435\u0442 \u201cSigned-off-by\u201d \u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0435\u0431\u0435\u0439\u0437\u0438\u0442\u0441\u044f\u200b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 3 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0432 \u0432\u0435\u0442\u043a\u0435 \u0438 \u0432\u0441\u0435 \u043e\u043d\u0438 \u0431\u0435\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435: <pre><code>git rebase --signoff HEAD~3\n</code></pre></p> <p>Git \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 3 \u043a\u043e\u043c\u043c\u0438\u0442\u0430, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 (\u0441 \u0432\u0430\u0448\u0438\u043c\u0438 \u0438\u043c\u0435\u043d\u0435\u043c \u0438 email \u0438\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a) \u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445. \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u043e\u043a \u0432\u0430\u043c \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f: <pre><code>git push --force origin &lt;\u0432\u0430\u0448\u0430-\u0432\u0435\u0442\u043a\u0430&gt;\n</code></pre></p>"},{"location":"ru/DCO/#rebase","title":"\u0418\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 rebase (\u0440\u0443\u0447\u043d\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431):","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c rebase. \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0443 \u0432\u0430\u0441 3 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0431\u0435\u0437 \u043f\u043e\u0434\u043f\u0438\u0441\u0438. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0441 \u043e\u043f\u0446\u0438\u0435\u0439 -i: <pre><code>git rebase -i HEAD~3\n</code></pre> \u041e\u0442\u043a\u0440\u043e\u0435\u0442\u0441\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u044d\u0442\u0438\u0445 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432. \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e pick \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u043c \u043d\u0430 reword.</p> <p>\u0417\u0430\u043a\u0440\u043e\u0439\u0442\u0435 \u0444\u0430\u0439\u043b \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0430, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e Git \u043d\u0430\u0447\u043d\u0451\u0442 \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u043e\u043d \u043f\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u043e\u0442\u043a\u0440\u043e\u0435\u0442 \u0432\u0430\u0448 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0442\u0430\u043a\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \u201cSigned-off-by: \u2026\u201d \u0432 \u043a\u043e\u043d\u0435\u0446. \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0438 \u0432\u044b\u0439\u0434\u0438\u0442\u0435. </p> <p>\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0430 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443:</p> <pre><code>git commit --amend --no-edit --signoff\n</code></pre> <p>\u042d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u043f\u0438\u0448\u0435\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0438 \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u0442.</p> <p>\u0414\u043b\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043a\u043e\u043c\u043c\u0438\u0442\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435:</p> <pre><code>git rebase --continue\n</code></pre> <p>\u041f\u043e\u0432\u0442\u043e\u0440\u044f\u0439\u0442\u0435, \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0451\u0442\u0435 \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b. \u0412 \u0438\u0442\u043e\u0433\u0435, \u043f\u043e\u0441\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0435\u0439 \u043a\u043e \u0432\u0441\u0435\u043c, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439:</p> <pre><code>git push --force origin &lt;\u0432\u0430\u0448\u0430-\u0432\u0435\u0442\u043a\u0430&gt;\n</code></pre> <p>\u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u0435\u0441\u043b\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0434\u043e\u043b\u0433\u043e, \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c squash \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u0432 \u043e\u0434\u0438\u043d, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043d\u043e\u0432\u043e. </p> <p>\u042d\u0442\u043e \u0443\u0431\u0435\u0440\u0451\u0442 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b, \u043d\u043e \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442.</p> <pre><code>git rebase -i HEAD~N\n</code></pre> <p>\u0412 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0432\u044b\u0448\u0435, N \u2013 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432, \u043f\u043e\u043c\u0435\u0442\u044c\u0442\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u043a\u0430\u043a pick, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u0430\u043a squash, \u0438 \u043a\u043e\u0433\u0434\u0430 \u043e\u0442\u043a\u0440\u043e\u0435\u0442\u0441\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u2013 \u0432\u043f\u0438\u0448\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u201cSigned-off-by\u201d. \u0417\u0430\u0442\u0435\u043c force-push.</p> <pre><code>\u26a0\ufe0f \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0439 \u0448\u0430\u0433 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442 \u2013 \u0438\u043d\u043e\u0433\u0434\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u0432 PR \u0432\u0430\u0436\u043d\u0430\n</code></pre>"},{"location":"ru/DCO/#squashrebase","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u044c \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 squash/rebase \u043f\u0435\u0440\u0435\u0434 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c","text":"<p>\u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044f: \u0412\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435\u0441\u044c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c (squash) \u0441\u0432\u043e\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0438\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c rebase \u0432\u0435\u0442\u043a\u0438 \u043d\u0430 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0438 \u043f\u0435\u0440\u0435\u0434 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c, \u0438 \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0441\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b (\u0438\u043b\u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442) \u0438\u043c\u0435\u044e\u0442 DCO-\u043f\u043e\u0434\u043f\u0438\u0441\u044c.</p> <p>\u0427\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0435\u0441\u0442\u044c:</p> <ul> <li>\u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u043a\u0432\u043e\u0448\u0438\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0441\u0435 \u0443\u0436\u0435 \u0438\u043c\u0435\u043b\u0438 sign-off, \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u201cSigned-off-by\u201d (\u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430). \u042d\u0442\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e. \u0412 DCO \u043d\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u0435\u0439 \u2013 \u0432\u0430\u0436\u043d\u043e, \u0447\u0442\u043e \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0443 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430. \u0427\u0430\u0441\u0442\u043e \u043f\u0440\u0438 squash \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442 \u0432\u0441\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0438, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c \u0432\u043a\u043b\u0430\u0434 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0430\u0432\u0442\u043e\u0440\u043e\u0432, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0431\u044b\u043b\u0438.</li> <li>\u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u043a\u0432\u043e\u0448\u0438\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b, \u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u0438 \u043d\u0435\u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435, \u0432\u0430\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430. \u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 </li> </ul> <p><pre><code>git rebase -i\n</code></pre>   \u0441 \u0444\u043b\u0430\u0433\u043e\u043c squash, Git \u043e\u0442\u043a\u0440\u043e\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432 \u043a\u043e\u043d\u0435\u0446 \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u044b \u0432\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u0447\u043a\u0443 \u201cSigned-off-by: \u0418\u043c\u044f \u0424\u0430\u043c\u0438\u043b\u0438\u044f youremail@example.com\u201d. </p> <p>\u041c\u043e\u0436\u043d\u043e \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0451 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u044c \u0433\u0434\u0435-\u0442\u043e \u0431\u044b\u043b\u0430) \u0438\u043b\u0438 \u043d\u0430\u0431\u0440\u0430\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e. - \u041f\u0440\u0438  \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b</p> <pre><code>git rebase upstream/main\n</code></pre> <p>\u0432\u0430\u0448\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0432\u0435\u0440\u0445 \u0441\u0432\u0435\u0436\u0438\u0445. \u0415\u0441\u043b\u0438 \u0432 \u043d\u0438\u0445 \u0443\u0436\u0435 \u0431\u044b\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0438, \u043e\u043d\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f.</p> <pre><code>\ud83d\udca1 \u041f\u0440\u043e\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u2013 \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u043f\u0446\u0438\u044e -s \u043f\u0440\u0438 \u043b\u044e\u0431\u044b\u0445 \u043a\u043e\u043c\u043c\u0438\u0442\u0430\u0445, \u0442\u043e\u0433\u0434\u0430 \u0438 \u043f\u0440\u0438 rebase, \u0438 \u043f\u0440\u0438 squash \u0443 \u0432\u0430\u0441 \u043d\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u044c\u044e.\n</code></pre>"},{"location":"ru/DCO/#github_1","title":"\u041a\u0430\u043a \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0438\u0442, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 GitHub","text":"<p>\u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0435\u0441\u0442\u044c \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c: \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e GitHub \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u201cSigned-off-by:\u201c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f DCO.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e, \u0432 \u043f\u043e\u043b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \"Extended description\", \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435:</p> <pre><code>Signed-off-by: Your GitHub name &lt;youremail@example.com&gt;\n</code></pre> <p></p> <p>\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0447\u0435\u0440\u0435\u0437 \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 GitHub, \u043c\u043e\u0436\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0439 email, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>YourPrivateName@users.noreply.github.com\n</code></pre> <pre><code>\u26a0\ufe0f DCO-\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442, \u0447\u0442\u043e\u0431\u044b email \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u043b \u0441 email-\u043e\u043c \u0430\u0432\u0442\u043e\u0440\u0430 \u043a\u043e\u043c\u043c\u0438\u0442\u0430.\n</code></pre> <p>\u0415\u0441\u043b\u0438 GitHub \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 noreply email \u2014 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0434\u043f\u0438\u0448\u0438\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442 \u0442\u0435\u043c \u0436\u0435 \u0430\u0434\u0440\u0435\u0441\u043e\u043c:</p> <pre><code>Signed-off-by: Your GitHub name &lt;YourPrivateName@users.noreply.github.com&gt;\n</code></pre> <p>\u0418\u043b\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u044c email: - \u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 Settings \u2192 Emails - \u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u043e\u043f\u0446\u0438\u044e \"Keep my email addresses private\"</p> <p></p>"},{"location":"ru/DCO/#dco-pull-request","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 DCO \u0431\u043e\u0442\u043e\u043c \u043f\u0440\u0438 Pull Request","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0435 Pull Request \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438, \u0433\u0434\u0435 \u0432\u043a\u043b\u044e\u0447\u0451\u043d DCO, \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u2013 \u0447\u0430\u0441\u0442\u043e \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c \u0431\u043e\u0442\u0430 DCO (GitHub App) \u0438\u043b\u0438 CI. \u042d\u0442\u043e\u0442 \u0431\u043e\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0432\u0430\u0448\u0435\u043c PR \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u0438. </p> <p>\u0412 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 GitHub \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u0441\u0442\u0430\u0442\u0443\u0441, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: DCO \u2014 All commits have a DCO sign-off (\u0435\u0441\u043b\u0438 \u0432\u0441\u0451 \u0445\u043e\u0440\u043e\u0448\u043e) \u0438\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435, \u0435\u0441\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u0442\u0430\u043a. \u0427\u0430\u0441\u0442\u043e DCO-\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043a\u0440\u0430\u0441\u043d\u044b\u043c \u043a\u0440\u0435\u0441\u0442\u0438\u043a\u043e\u043c \u274c \u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0432\u0440\u043e\u0434\u0435 \u201cAll commits must have a DCO sign-off from the author\u201d, \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b. </p> <p>\u0411\u043e\u0442 DCO \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u043d\u0430 \u0434\u0432\u0435 \u0432\u0435\u0449\u0438: 1. \u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u201cSigned-off-by:\u201d. \u0415\u0441\u043b\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u0432 \u043e\u0434\u043d\u043e\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u0435 \u0435\u0451 \u043d\u0435\u0442, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0440\u0430\u0437\u0443 \u043f\u0430\u0434\u0430\u0435\u0442. 2. \u0421\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0438 email \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0430\u0432\u0442\u043e\u0440\u0430 \u043a\u043e\u043c\u043c\u0438\u0442\u0430\u200b.</p> <p>\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0430\u0432\u0442\u043e\u0440 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u2013 \u201cIvan Ivanov ivan@example.com\u201d, \u0442\u043e \u0431\u043e\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u201cSigned-off-by: Ivan Ivanov ivan@example.com\u201d. \u0415\u0441\u043b\u0438 \u0442\u0430\u043c \u201cIvan ivan@example.com\u201d (\u0431\u0435\u0437 \u0444\u0430\u043c\u0438\u043b\u0438\u0438) \u0438\u043b\u0438 email \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0451\u0442.</p> <p>\u041a\u043e\u0433\u0434\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 DCO \u043f\u0430\u0434\u0430\u0435\u0442, \u0431\u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0432 PR \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043d\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443. \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0445\u0435\u0448 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0438 \u043f\u0440\u0438\u0447\u0438\u043d\u0443: \u201cMissing Signed-off-by\u201d \u0438\u043b\u0438 \u201cExpected Signed-off-by: X, but got Y\u201d. \u0422\u0430\u043a\u0436\u0435 \u043e\u043d \u043f\u043e\u0434\u0441\u043a\u0430\u0436\u0435\u0442, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u2013 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043e\u0432\u0435\u0442\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b Git \u0434\u043b\u044f \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f. </p> <p>\u0424\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u0431\u043e\u0442 \u0432\u0430\u043c \u0434\u0430\u0451\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e, \u043a\u0430\u043a \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 PR \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435. </p> <pre><code>\u26a0\ufe0f \u0411\u043e\u0442 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043b\u0435\u0433\u0438\u0442\u0438\u043c\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430, \u043d\u0435 \u0441\u0432\u044f\u0437\u0430\u043d \u0441 CLA, \u043e\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043c\u043e\u0442\u0440\u0438\u0442 \u0444\u043e\u0440\u043c\u0430\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0438\u0442\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442, DCO \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0437\u0435\u043b\u0451\u043d\u044b\u043c \u0434\u043b\u044f \u043c\u0435\u0440\u0434\u0436\u0430, \u0438\u043d\u0430\u0447\u0435 GitHub \u043d\u0435 \u0434\u0430\u0441\u0442 \u0441\u043c\u0435\u0440\u0436\u0438\u0442\u044c.\n</code></pre>"}]}